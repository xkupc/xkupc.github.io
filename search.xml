<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[并发编程-Semaphore的用法]]></title>
      <url>/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-Semaphore%E7%9A%84%E7%94%A8%E6%B3%95.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续看并发编程里的基础知识，今天来看一下Semaphore，Semaphore又称信号量，同样也是CyclicBarrierjava.util.concurrent包下一个多线程交互的辅助工具类。</p>
<h2 id="Semaphore的概念"><a href="#Semaphore的概念" class="headerlink" title="Semaphore的概念"></a>Semaphore的概念</h2><p>用来控制线程并发的数量。有点像lock，实现对资源获取权的限制，又有点像线程池，有多个资源获取权供线程获取和释放，不同的是线程通过Semaphore加锁和获取释放的并不是资源本身，而是Semaphore提供的一种许可状态。可能这么说不大好理解，我们来看看Semaphore的用法</p>
<h2 id="Semaphore的用法"><a href="#Semaphore的用法" class="headerlink" title="Semaphore的用法"></a>Semaphore的用法</h2><p>也是提供了两个构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过permits指定控制并发线程的个数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;&#125;</div><div class="line"><span class="comment">//通过fair,指定是否采用先进先出的策略来获取信号量许可，默认是NOfair的</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span></span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>核心方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取一个信号量许可，对应的还有获取多个信号量的重载方法，若获取不到，当前线程阻塞</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;&#125;</div><div class="line"><span class="comment">//释放一个信号量许可，对应的还有释放多个信号量的重载方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>看一个例子，通过Semaphore实现十个线程只有五个可以并发的操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Worker(semaphore).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> Semaphore semaphore;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(Semaphore semaphore)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.semaphore = semaphore;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                semaphore.acquire();</div><div class="line">                System.out.println(<span class="string">"子线程"</span> + Thread.currentThread().getName() + <span class="string">"开始执行"</span>);</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">                System.out.println(<span class="string">"子线程"</span> + Thread.currentThread().getName() + <span class="string">"执行完毕"</span>);</div><div class="line">                semaphore.release();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">子线程Thread-0开始执行</div><div class="line">子线程Thread-1开始执行</div><div class="line">子线程Thread-2开始执行</div><div class="line">子线程Thread-3开始执行</div><div class="line">子线程Thread-4开始执行</div><div class="line">子线程Thread-1执行完毕</div><div class="line">子线程Thread-5开始执行</div><div class="line">子线程Thread-2执行完毕</div><div class="line">子线程Thread-6开始执行</div><div class="line">子线程Thread-4执行完毕</div><div class="line">子线程Thread-7开始执行</div><div class="line">子线程Thread-0执行完毕</div><div class="line">子线程Thread-9开始执行</div><div class="line">子线程Thread-3执行完毕</div><div class="line">子线程Thread-8开始执行</div><div class="line">子线程Thread-5执行完毕</div><div class="line">子线程Thread-6执行完毕</div><div class="line">子线程Thread-9执行完毕</div><div class="line">子线程Thread-7执行完毕</div><div class="line">子线程Thread-8执行完毕</div></pre></td></tr></table></figure></p>
<p>从结果可以看到前五个线程并发执行，后五个必须等前面五个释放信号量许可才能开始执行<br>在有些场景下为了避免限制并发之后，大量线程因调用semaphore.acquire()而出现死等的情况，我们可以通过判断其提供的非阻塞的几个方法的返回结果来避免线程等待：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//尝试获取一个信号量许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span> </span>&#123; &#125;;</div><div class="line"><span class="comment">//尝试获取一个信号量许可，若在指定的时间内获取成功，则立即返回true，则立即返回false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; &#125;;</div><div class="line"><span class="comment">//尝试获取permits个信号量许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123; &#125;; </div><div class="line"><span class="comment">//尝试获取permits个信号量许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; &#125;;</div></pre></td></tr></table></figure></p>
<p>由此我们可以看出，通过Semaphore我们可以控制资源的访问权限，比如连接池。</p>
]]></content>
      
        <categories>
            
            <category> java base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程-CyclicBarrier的使用]]></title>
      <url>/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-CyclicBarrier%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇里CountDownLatch的使用，这一篇来学习一个和CountDownLatch功能差不多的线程同步工具类CyclicBarrier。</p>
<h2 id="CyclicBarrier的概念"><a href="#CyclicBarrier的概念" class="headerlink" title="CyclicBarrier的概念"></a>CyclicBarrier的概念</h2><p>同样的CyclicBarrierjava.util.concurrent包下用来实现多线程之间同步的工具类，比起CountDownLatch，CyclicBarrier通过一个默认状态(所有的线程都被挂起)来作为是否继续执行的标记，当所有的线程都到达这个状态时，线程才可以继续往下执行。</p>
<h2 id="CountDownLatch的用法"><a href="#CountDownLatch的用法" class="headerlink" title="CountDownLatch的用法"></a>CountDownLatch的用法</h2><p>CountDownLatch提供了两个构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//指定等待到默认状态的线程数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">//指定所有线程达到默认状态后，会执行的操作barrierAction，该操作将由最后一个达到默认状态的线程执行</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>核心方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用此方法的线程，实际上就是被挂起，达到默认状态</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException </span>&#123; &#125;;</div><div class="line"><span class="comment">//指定超时时间，超时后，达到默认状态的线程也会继续执行，同时会抛出异常 生产建议使用超时时间，避免死等造成内存溢出</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span><span class="keyword">throws</span> InterruptedException,BrokenBarrierException,TimeoutException </span>&#123; &#125;;</div></pre></td></tr></table></figure></p>
<p>来看个例子，通过CyclicBarrier实现两个线程的同步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span>  <span class="keyword">int</span> workerNum = <span class="number">2</span>;</div><div class="line">        <span class="keyword">final</span>  CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(workerNum);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;workerNum;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Worker(barrier).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(CyclicBarrier cyclicBarrier)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"开始执行"</span>);</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">                System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"执行完毕"</span>);</div><div class="line">                cyclicBarrier.await();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"所有线程执行完毕，继续执行其他东西..."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>执行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">子线程Thread-0开始执行</div><div class="line">子线程Thread-1开始执行</div><div class="line">子线程Thread-0执行完毕</div><div class="line">子线程Thread-1执行完毕</div><div class="line">所有线程执行完毕，继续执行其他东西...</div><div class="line">所有线程执行完毕，继续执行其他东西...</div></pre></td></tr></table></figure></p>
<p>如果不使用 cyclicBarrier.await()，执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">子线程Thread-1开始执行</div><div class="line">子线程Thread-0开始执行</div><div class="line">子线程Thread-1执行完毕</div><div class="line">所有线程执行完毕，继续执行其他东西...</div><div class="line">子线程Thread-0执行完毕</div><div class="line">所有线程执行完毕，继续执行其他东西...</div></pre></td></tr></table></figure></p>
<p>从结果可以看出，通过cyclicBarrier.await()，每个线程执行完毕后，都在等待其他线程执行完毕，然后执行后续其他东西的执行。<br>同时我们可以通过实现barrierAction进行额外的一些操作来实现更多复杂的业务场景：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span>  <span class="keyword">int</span> workerNum = <span class="number">2</span>;</div><div class="line">        <span class="keyword">final</span>  CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(workerNum, <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"当前线程:"</span>+Thread.currentThread().getName()+<span class="string">"开始执行其他一些操作了"</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">5000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;workerNum;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Worker(barrier).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(CyclicBarrier cyclicBarrier)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"开始执行"</span>);</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">                System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"执行完毕"</span>);</div><div class="line">                cyclicBarrier.await();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"所有线程执行完毕，继续执行其他东西..."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">子线程Thread-0开始执行</div><div class="line">子线程Thread-1开始执行</div><div class="line">子线程Thread-0执行完毕</div><div class="line">子线程Thread-1执行完毕</div><div class="line">当前线程:Thread-1开始执行其他一些操作了</div><div class="line">所有线程执行完毕，继续执行其他东西...</div><div class="line">所有线程执行完毕，继续执行其他东西...</div></pre></td></tr></table></figure></p>
<p>从结果可以看出只有Thread-1执行了barrierAction，且是它完成操作后，各个线程才执行后续的操作。<br>从await方法注释里我们知道，是最后一个到达默认状态的线程执行了barrierAction<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* Creates a <span class="keyword">new</span> &#123;<span class="meta">@code</span> CyclicBarrier&#125; that will trip when the</div><div class="line">* <span class="function">given number of <span class="title">parties</span> <span class="params">(threads)</span> are waiting upon it, and which</span></div><div class="line"><span class="function">* will execute the given barrier action when the barrier is tripped,</span></div><div class="line"><span class="function">* performed by the last thread entering the barrier.</span></div></pre></td></tr></table></figure></p>
<h2 id="与CountDownLatch区别"><a href="#与CountDownLatch区别" class="headerlink" title="与CountDownLatch区别"></a>与CountDownLatch区别</h2><p>CountDownLatch主要用于一个线程与其他多个线程的同步上，barrierAction主要是用于多个线程之间的同步，同步相对简单，且能支持复杂的业务场景。</p>
]]></content>
      
        <categories>
            
            <category> java base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程-CountDownLatch与join]]></title>
      <url>/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-CountDownLatch%E4%B8%8Ejoin.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近比较闲，继续前阵子想学的东西-并发编程，还是从最基础的东西开始。在jdk1.5中提供了许多并发编程的类，今天来学西一个简单的辅助类-CountDownLatch。</p>
<h2 id="CountDownLatch的概念"><a href="#CountDownLatch的概念" class="headerlink" title="CountDownLatch的概念"></a>CountDownLatch的概念</h2><p>CountDownLatch是在java.util.concurrent包下用来实现多线程之间同步的工具类，可以理解为它间接的了实现了线程之间的通信功能。我们可以通过它来实现主线程等待一个线程组完成工作后继续执行，CountDownLatch通过主线程初始化一个计数器，然后等待子线程，各个子线程完成工作后执行计数器减一的操作，当计数器值减为0时，代表所有的子线程都已完成作业，则主线程可继续执行。</p>
<h2 id="CountDownLatch的用法"><a href="#CountDownLatch的用法" class="headerlink" title="CountDownLatch的用法"></a>CountDownLatch的用法</h2><p>CountDownLatch的构造器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化计数器值count</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;  &#125;;</div></pre></td></tr></table></figure></p>
<p>CountDownLatch的三个核心方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用此方法的线程会被挂起（应该是同步阻塞）它会等待直到count值为0才继续执行</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123; &#125;;</div><div class="line"><span class="comment">//设置挂起的超时时间，如果超时，不管count值，主线程都会继续执行，这里超时会抛出异常，需要捕获，生产建议使用超时时间，避免死等造成内存溢出</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; &#125;; </div><div class="line"><span class="comment">//将count值减1</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123; &#125;;</div></pre></td></tr></table></figure></p>
<p>通过CountDownLatch实现两个子进程与主线程的同步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span>  <span class="keyword">int</span> workerNum = <span class="number">2</span>;</div><div class="line">        <span class="keyword">final</span>  CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(workerNum);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;workerNum;i++)&#123;</div><div class="line">             <span class="keyword">new</span> Worker(latch).start();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"等待子线程执行..."</span>);</div><div class="line">           <span class="keyword">long</span> time1 = System.currentTimeMillis();</div><div class="line">            latch.await();</div><div class="line">            System.out.println(<span class="string">"子线程执行完毕，等待时间:"</span>+ String.valueOf(System.currentTimeMillis()-time1));</div><div class="line">            System.out.println(<span class="string">"主线程继续执行"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> CountDownLatch latch;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(<span class="keyword">final</span> CountDownLatch latch)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.latch = latch;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"开始执行"</span>);</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">                System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"执行完毕"</span>);</div><div class="line">                latch.countDown();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">等待子线程执行...</div><div class="line">子线程Thread-1开始执行</div><div class="line">子线程Thread-0开始执行</div><div class="line">子线程Thread-1执行完毕</div><div class="line">子线程Thread-0执行完毕</div><div class="line">子线程执行完毕，等待时间:3002</div><div class="line">主线程继续执行</div></pre></td></tr></table></figure></p>
<h2 id="与join的区别"><a href="#与join的区别" class="headerlink" title="与join的区别"></a>与join的区别</h2><p>实现线程的同步，我们很容易想到join，看看join实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          Worker a = <span class="keyword">new</span> Worker();</div><div class="line">          Worker b = <span class="keyword">new</span> Worker();</div><div class="line">          a.start();</div><div class="line">          b.start();</div><div class="line">          System.out.println(<span class="string">"等待子线程执行..."</span>);</div><div class="line">         <span class="keyword">long</span> time1 = System.currentTimeMillis();</div><div class="line">          a.join();</div><div class="line">          b.join();</div><div class="line">          System.out.println(<span class="string">"子线程执行完毕,等待时间:"</span>+ String.valueOf(System.currentTimeMillis()-time1));</div><div class="line">          System.out.println(<span class="string">"主线程继续执行"</span>);</div><div class="line">      &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"开始执行"</span>);</div><div class="line">               Thread.sleep(<span class="number">3000</span>);</div><div class="line">               System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"执行完毕"</span>);</div><div class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">等待子线程执行...</div><div class="line">子线程Thread-1开始执行</div><div class="line">子线程Thread-0开始执行</div><div class="line">子线程Thread-1执行完毕</div><div class="line">子线程Thread-0执行完毕</div><div class="line">子线程执行完毕，等待时间:3004</div><div class="line">主线程继续执行</div></pre></td></tr></table></figure></p>
<p>我们可以看到打印结果是一样的，那join和CountDownLatch有什么区别呢?<br>我觉得可以这么理解，首先主线程通过调用子线程的join方法后，必须等到子线程执行完成后，才能会继续执行，而使用CountDownLatch则只需等到计数器值为0，主线程即可继续执行下去，不必等到子线程执行完，也就说我们可以继续在子线程执行完latch.countDown()后继续执行一些任务，在实际业务场景中做到更加精细的控制。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"开始执行"</span>);</div><div class="line">               Thread.sleep(<span class="number">3000</span>);</div><div class="line">               System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"执行完毕"</span>);</div><div class="line">               latch.countDown();</div><div class="line">               System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"执行别的东西"</span>);</div><div class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">           &#125;</div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">等待子线程执行...</div><div class="line">子线程Thread-<span class="number">1</span>开始执行</div><div class="line">子线程Thread-<span class="number">0</span>开始执行</div><div class="line">子线程Thread-<span class="number">0</span>执行完毕</div><div class="line">子线程Thread-<span class="number">0</span>执行别的东西</div><div class="line">子线程Thread-<span class="number">1</span>执行完毕</div><div class="line">子线程执行完毕，等待时间:<span class="number">3001</span></div><div class="line">主线程继续执行</div><div class="line">子线程Thread-<span class="number">1</span>执行别的东西</div></pre></td></tr></table></figure></p>
<p>说到这里我们可能会想到Lock与synchronized 的区别，差不多也是这个套路吧。另一方面，我们还可以将CountDownLatch用于一组线程互相等待至某个状态，然后这一组线程再同时执行的场景，子线程设置 latch.await()，主线程里通过latch.countDown()触发所有子线程执行。</p>
]]></content>
      
        <categories>
            
            <category> java base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Springboot注解之Profile]]></title>
      <url>/Springboot%E6%B3%A8%E8%A7%A3%E4%B9%8BProfile.html</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>荒废一周研究activiti无果，研究一下有意思的Springboot注解。我们都知道springboot提供spring.profiles.active参数配置让开发者配置不同的运行环境的配置。今天来介绍一个关于这个配置的另一个用法。还是来说一个业务场景，有一个需要发送手机验证码场景，我们都知道第三方的手机短信推送服务是按次数计费的，考虑到成本，我们在测试环境测试的时候可以不真实的将短信发送，而是保存短信记录，在后台管理页查看短信发送记录即可获取验证码。这个时候我们可能想到测试和生产环境要切换接口，那么如何优雅的切换接口呢？</p>
<h2 id="Profile注解"><a href="#Profile注解" class="headerlink" title="Profile注解"></a>Profile注解</h2><p>使用profile注解，我们可以将当前环境对应的配置bean或者service通过spirng的DI进行依赖注入。也就说一个短信发送服务接口，我有两种实现，一种实现测试环境不真实发送，一种实现生产环境真实发送，然后通过在两个实现上设置profile注解的环境值，spring会根据spring.profiles.active设置值来注入相应环境下的服务。<br><a id="more"></a></p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>配置文件配置：<br>spring.profiles.active=test<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SMSSendService</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 发送文本验证码</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">(String phone, String content)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 发送语音验证码</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendVoiceSms</span><span class="params">(String phone, String content)</span></span>;</div><div class="line">&#125;</div><div class="line">生产配置服务：</div><div class="line"><span class="meta">@Profile</span>(<span class="string">"prod"</span>)</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSSendServiceImpl</span> <span class="keyword">implements</span> <span class="title">SMSSendService</span> </span>&#123;</div><div class="line">    .....</div><div class="line">&#125;</div><div class="line">测试配置服务：</div><div class="line"><span class="meta">@Profile</span>(<span class="string">"test"</span>)</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSMSSendServiceImpl</span> <span class="keyword">implements</span> <span class="title">SMSSendService</span> </span>&#123;</div><div class="line">    ....</div><div class="line">&#125;</div><div class="line">使用：</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> SMSSendService smsSendService;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">       smsSendService.sendSms(<span class="string">"132xxxxxxxx"</span>, <span class="string">"测试测试一下"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java framework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-boot与RabbitMQ整合]]></title>
      <url>/spring-boot%E4%B8%8ERabbitMQ%E6%95%B4%E5%90%88.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面几篇我们了解了RabbitMQ的消息模型和一些工作机制，今天通过spring-boot对其进行一下整合。我们知道了RabbitMQ通过Exchange对消息进行分发，Exchange有fanout,topic,direct和默认等几种类型。下面来分别对这几种类型进行spring-boot的整合。关于springboot与RabbitMQ的整合，在网上可以找到很多的demo,单独跑是没有问题的，但是如果想要把它抽象到框架上的东西，供业务层调用就比较难了，毕竟是要做架构师的男人，就该勇敢的尝试一下。</p>
<h2 id="RabbitMQ配置"><a href="#RabbitMQ配置" class="headerlink" title="RabbitMQ配置"></a>RabbitMQ配置</h2><p>AMQP依赖：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">1.4</span><span class="number">.5</span>.RELEASE&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>配置文件配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">spring.rabbitmq.host=<span class="number">127.0</span>.0.1</div><div class="line">spring.rabbitmq.port=<span class="number">5672</span></div><div class="line">spring.rabbitmq.username=admin</div><div class="line">spring.rabbitmq.password=<span class="number">123456</span></div><div class="line"><span class="comment">//指定broker</span></div><div class="line">spring.rabbitmq.virtual-host=/test</div><div class="line"><span class="comment">//publisher-confirm</span></div><div class="line">spring.rabbitmq.publisher-confirms=<span class="keyword">true</span></div><div class="line">spring.rabbitmq.publisher-returns=<span class="keyword">true</span></div></pre></td></tr></table></figure></p>
<h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p>通过@Configuration初始化RabbitMQ相关配置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.host&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String host;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.port&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String port;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.username&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.password&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.virtual-host&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String vhost;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.rabbitmq.publisher-confirms&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> publisherConfirms;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$spring.rabbitmq.publisher-returns&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> publisherReturns;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">ConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        CachingConnectionFactory cachingConnectionFactory = <span class="keyword">new</span> CachingConnectionFactory();</div><div class="line">        cachingConnectionFactory.setAddresses(host + <span class="string">":"</span> + port);</div><div class="line">        cachingConnectionFactory.setUsername(username);</div><div class="line">        cachingConnectionFactory.setPassword(password);</div><div class="line">        cachingConnectionFactory.setVirtualHost(vhost);</div><div class="line">        cachingConnectionFactory.setPublisherConfirms(publisherConfirms);</div><div class="line">        cachingConnectionFactory.setPublisherReturns(publisherReturns);</div><div class="line">        <span class="keyword">return</span> cachingConnectionFactory;</div><div class="line">    &#125;   </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        RabbitTemplate template = <span class="keyword">new</span> RabbitTemplate(connectionFactory());</div><div class="line">        <span class="keyword">return</span> template;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">RabbitAdmin <span class="title">rabbitAdmin</span><span class="params">()</span> </span>&#123;</div><div class="line">        RabbitAdmin rabbitAdmin = <span class="keyword">new</span> RabbitAdmin(connectionFactory());</div><div class="line">        <span class="keyword">return</span> rabbitAdmin;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">监听器容器工厂基础配置,所有的业务层消费者配置继承该配置，采用手工确认的方式，由业务层控制消息销毁：</div><div class="line"><span class="meta">@EnableRabbit</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitListenerConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title">rabbitListenerContainerFactoryWithManual</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</div><div class="line">        SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</div><div class="line">        factory.setConnectionFactory(connectionFactory);</div><div class="line">        <span class="comment">//最少消费者数量</span></div><div class="line">        factory.setConcurrentConsumers(<span class="number">3</span>);</div><div class="line">        <span class="comment">//最大消费数量</span></div><div class="line">        factory.setMaxConcurrentConsumers(<span class="number">10</span>);</div><div class="line">        <span class="comment">//队列里最大的未确认消息个数</span></div><div class="line">        factory.setPrefetchCount(<span class="number">100</span>);</div><div class="line">        factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</div><div class="line">        <span class="keyword">return</span> factory;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="基础客户端配置"><a href="#基础客户端配置" class="headerlink" title="基础客户端配置"></a>基础客户端配置</h2><p>生产者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(Sender.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 发送默认Exchange消息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> queueName</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String queueName, String message)</span> </span>&#123;</div><div class="line">        send(<span class="string">""</span>, queueName, message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 发送json格式消息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> exchangeName</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> routingKey</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String exchangeName, String routingKey, String message)</span> </span>&#123;</div><div class="line">        <span class="comment">//生成消息唯一标识，回调确认使用</span></div><div class="line">        CorrelationData correlationId = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</div><div class="line">        <span class="comment">//设置消息体属性参数messageProperties</span></div><div class="line">        MessagePostProcessor messagePostProcessor = messagePostProcessor(correlationId.getId());</div><div class="line">        logger.info(<span class="string">"消息routing key：&#123;&#125;，消息id：&#123;&#125;，消息内容：&#123;&#125;"</span>, routingKey, correlationId.getId(), message);</div><div class="line">        rabbitTemplate.convertAndSend(exchangeName, routingKey, message, messagePostProcessor, correlationId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">MessagePostProcessor <span class="title">messagePostProcessor</span><span class="params">(String uuid)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message -&gt;</div><div class="line">        &#123;</div><div class="line">            MessageProperties messageProperties = message.getMessageProperties();</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != messageProperties) &#123;</div><div class="line">                messageProperties.setHeader(<span class="string">"id"</span>, uuid);</div><div class="line">                messageProperties.setHeader(<span class="string">"timestamp"</span>, System.currentTimeMillis() / <span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> message;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">生产者基础配置类，所有业务层生产者配置继承该类，</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PublisherConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">sender</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sender();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">消费者处理类，所有业务层消费者继承该类，实现具体的消息处理方法handleMessage(message)，并确认消息：</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverHandler</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ReceiverHandler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">"receive message:&#123;&#125;"</span>, message);</div><div class="line">        MqHandlerResult result = MqHandlerResult.REDO;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = handleMessage(message);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"message handle error:&#123;&#125;"</span>, e);</div><div class="line">            <span class="comment">//抛出自定义异常,供控制层捕获并统计</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RabbitMQException();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">switch</span> (result) &#123;</div><div class="line">                <span class="keyword">case</span> SUCCESS:</div><div class="line">                    logger.info(<span class="string">"message success handle:&#123;&#125;"</span>, message);</div><div class="line">                    <span class="comment">//只确认当前消息</span></div><div class="line">                    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> REDO:</div><div class="line">                    logger.info(<span class="string">"message should redo:&#123;&#125;"</span>, message);</div><div class="line">                    <span class="comment">//是否重新推送标示</span></div><div class="line">                    <span class="keyword">boolean</span> requeue = <span class="keyword">true</span>;</div><div class="line">                    channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>, requeue);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> REJECT:</div><div class="line">                    logger.info(<span class="string">"message should reject:&#123;&#125;"</span>, message);</div><div class="line">                    channel.basicReject(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    logger.info(<span class="string">"message handle return error"</span>);</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RabbitMQException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MqHandlerResult <span class="title">handleMessage</span><span class="params">(Message message)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="简单工作队列（默认Exchange）"><a href="#简单工作队列（默认Exchange）" class="headerlink" title="简单工作队列（默认Exchange）"></a>简单工作队列（默认Exchange）</h2><p>默认的Exchange实际上是一种点对点的通信方式，一个消息只会被一个客户端消费，Exchange默认为空，所以我们直接在配置里初始化队列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWorkQueueConfig</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MqQueueName[] mqQueueName;</div><div class="line">    <span class="comment">//业务层通过该方法设置队列名</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setMqQueueName</span><span class="params">(MqQueueName[] mqQueueName)</span> </span>&#123;</div><div class="line">        SimpleWorkQueueConfig.mqQueueName = mqQueueName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    RabbitAdmin rabbitAdmin;</div><div class="line">    <span class="comment">//通过工厂类初始化队列</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueueFactory <span class="title">queueFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueueFactory(rabbitAdmin, mqQueueName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="简单队列生产者配置："><a href="#简单队列生产者配置：" class="headerlink" title="简单队列生产者配置："></a>简单队列生产者配置：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePublisherConfig</span> <span class="keyword">extends</span> <span class="title">PublisherConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单队列消费者配置："><a href="#简单队列消费者配置：" class="headerlink" title="简单队列消费者配置："></a>简单队列消费者配置：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleReceiverConfig</span> <span class="keyword">extends</span> <span class="title">RabbitListenerConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="业务层实现："><a href="#业务层实现：" class="headerlink" title="业务层实现："></a>业务层实现：</h3><p>初始化相关配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@AutoConfigureAfter</span>(value = RabbitConfig.class)</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Import</span>(&#123;SimpleWorkQueueConfig.class, SimpleReceiverConfig.class, SimplePublisherConfig.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTestMqConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleTestMqConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">        TestMqQueueName[] testMqQueueNames = &#123;TestMqQueueName.TEST_MQ_QUEUE_NAME&#125;;</div><div class="line">        SimpleWorkQueueConfig.setMqQueueName(testMqQueueNames);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生产者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPublisher</span> <span class="keyword">extends</span> <span class="title">PublisherConfirmHandler</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(TestPublisher.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    Sender sender;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    RabbitTemplate rabbitTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleMq</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);</div><div class="line">        sender.send(TestMqQueueName.TEST_MQ_QUEUE_NAME.getQueueName(), message);</div><div class="line">        logger.info(<span class="string">"send message:&#123;&#125;"</span> , message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ackFail</span><span class="params">()</span> </span>&#123;</div><div class="line">       logger.warn(<span class="string">"message did not had dispatch"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ackSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">       logger.info(<span class="string">"message had dispatch"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>消费者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReceiver</span> <span class="keyword">extends</span> <span class="title">ReceiverHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(TestReceiver.class);</div><div class="line">    <span class="comment">//监听指定队列，并指定监听容器工厂</span></div><div class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"#&#123;T(com.xkupc.framework.test.rabbitmq.common.TestMqQueueName).TEST_MQ_QUEUE_NAME.queueName&#125;"</span>,</div><div class="line">            containerFactory = <span class="string">"rabbitListenerContainerFactoryWithManual"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doMessage</span><span class="params">(Message message, @Header(org.springframework.amqp.support.AmqpHeaders.CHANNEL)</span> Channel channel) </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            onMessage(message, channel);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"handle message error:&#123;&#125;"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//实际业务处理</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MqHandlerResult <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        logger.info(<span class="string">"receive the message:"</span> + message);</div><div class="line">        <span class="comment">//redo something</span></div><div class="line">        <span class="keyword">return</span> MqHandlerResult.SUCCESS;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">TestPublisher testPublisher;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMQ</span><span class="params">()</span> </span>&#123;</div><div class="line">    testPublisher.testSimpleMq(<span class="string">"hello world!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里只是简单介绍，源码可以到我的github上看看。<a href="https://github.com/xkupc/framework-parent" target="_blank" rel="external">https://github.com/xkupc/framework-parent</a></p>
]]></content>
      
        <categories>
            
            <category> 消息中间件,Rabbitmq </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> Rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息中间件-Rabbitmq远程过程调用（RPC）]]></title>
      <url>/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-Rabbitmq%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%EF%BC%88RPC%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://xkupc.top/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-Rabbitmq%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97.html" target="_blank">消息中间件第二篇</a>介绍了通过RabbitMQ的工作队列，我们将耗时的任务分发给多个消费者去处理，现在我们有这样一个需求，生产者需要获取消费者处理后的结果，还是用户注册的场景，注册信息被分发给大数据服务后，大数据服务分析处理用户信息后，计算出该用户的基础信用积分，并需将结果回传给账户中心保存。是的，这就是我们熟知的远程过程调用模式。如果我们不借助RabbitMQ的RPC模式，我们也可以将大数据服务也当生产者，当计算出用户信息积分后，将结果丢到一个队列供账户中心去消费处理保存。今天来研究一下RabbitMQ的RPC是怎么玩的。<br><a id="more"></a></p>
<h2 id="RabbitMQ-RPC"><a href="#RabbitMQ-RPC" class="headerlink" title="RabbitMQ RPC"></a>RabbitMQ RPC</h2><p>直接看RabbitMQ的RPC模型：<br><img src="images/rabbitMQ/rpc-model.png" alt="RabbitMQ-direct"><br>我们可以看到，实际上，RabbitMQ还是使用两个队列来实现RPC,只不过它将两个队列进行了绑定。我们来看看它是怎么绑定两个队列的。<br>首先我们来看如何声明一个RPC的队列：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String callbackQueueName = channel.queueDeclare().getQueue();</div><div class="line"></div><div class="line">BasicProperties props = <span class="keyword">new</span> BasicProperties</div><div class="line">                            .Builder()</div><div class="line">                            .replyTo(callbackQueueName)</div><div class="line">                            .build();</div><div class="line"></div><div class="line">channel.basicPublish(<span class="string">""</span>, <span class="string">"rpc_queue"</span>, props, message.getBytes());</div></pre></td></tr></table></figure></p>
<p>终于用到了BasicProperties了。BasicProperties提供了许多消息属性的配置方法。我们使用replyTo声明一个队列的回调队列，即实现两个队列的绑定。<br>另一个问题是当生产者将消息推到RPC队列进行处理后，它从回调队列里收到了返回结果消息，如何区分出这个结果是它刚刚发出的那个消息的返回结果呢？即我们如何将请求和结果进行匹配，如果我们不使用RabbitMQ的RPC模式，我们可能使用消息内容里的一个唯一键，比如用户id，在RabbitMQ RPC模式里，通过的设置BasicProperties里的correlationId方法，我们可以设置唯一的一个请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">AMQP.BasicProperties replyProps = <span class="keyword">new</span> AMQP.BasicProperties</div><div class="line">                            .Builder()</div><div class="line">                            .correlationId(properties.getCorrelationId())</div><div class="line">                            .build();</div></pre></td></tr></table></figure></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>生产者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRPCMq</span><span class="params">(String rpcQuenceName, String callBackQuenceName, String s1)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String corrId = UUID.randomUUID().toString();</div><div class="line">            Connection connection = connectionFactory.newConnection();</div><div class="line">            Channel channel = connection.createChannel();</div><div class="line">            AMQP.BasicProperties properties = <span class="keyword">new</span> AMQP.BasicProperties.Builder().correlationId(corrId).replyTo(callBackQuenceName).build();</div><div class="line">            channel.queueDeclare(rpcQuenceName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">            channel.basicPublish(<span class="string">""</span>,rpcQuenceName,properties,s1.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">            System.out.println(<span class="string">"send message:"</span> + s1);</div><div class="line">            <span class="comment">//新建阻塞队列，等待返回结果</span></div><div class="line">            BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">1</span>);</div><div class="line">            channel.basicConsume(callBackQuenceName, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (properties.getCorrelationId().equals(corrId)) &#123;</div><div class="line">                        blockingQueue.offer(<span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            System.out.println(<span class="string">"result:"</span> + blockingQueue.take());</div><div class="line">            channel.close();</div><div class="line">            connection.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>消费者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveRPCMq</span><span class="params">(String rpcQueueName,String callBackQueueName)</span></span>&#123;</div><div class="line">       Connection connection = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           connection = connectionFactory.newConnection();</div><div class="line">           Channel channel = connection.createChannel();</div><div class="line">           channel.queueDeclare(rpcQueueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">           System.out.println(<span class="string">"Waiting for message...."</span>);</div><div class="line">           Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></div><div class="line"><span class="function">                       <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                   String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</div><div class="line">                   AMQP.BasicProperties replyProps = <span class="keyword">null</span>;</div><div class="line">                   <span class="keyword">try</span> &#123;</div><div class="line">                       System.out.println(<span class="string">"receive message:"</span> + message);</div><div class="line">                       replyProps = <span class="keyword">new</span> AMQP.BasicProperties.Builder().correlationId(properties.getCorrelationId()).build();</div><div class="line">                   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                       channel.basicPublish(<span class="string">""</span>,properties.getReplyTo(),replyProps,<span class="string">"Hello world too"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">                       <span class="comment">//手工确认消息，确认当前的deliveryTag的消息</span></div><div class="line">                       channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;;</div><div class="line">           <span class="comment">//取消自动ack,等待程序处理结果</span></div><div class="line">           <span class="keyword">boolean</span> autoAck = <span class="keyword">false</span>;</div><div class="line">           channel.basicConsume(rpcQueueName, autoAck, consumer);</div><div class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>测试用例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRPCMq</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">    String rpcQueueName = <span class="string">"RPC_QUEUE"</span>;</div><div class="line">    String callBackName = <span class="string">"REPLY_QUEUE"</span>;</div><div class="line">    receivemqService.receiveRPCMq(rpcQueueName,callBackName);</div><div class="line">    sendmqService.sendRPCMq(rpcQueueName, callBackName,<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里有个比较尴尬的问题是rpcQueueName没法使用RabbitMQ提供的默认队列的方式创建，小编我提前新建了一个永久的队列。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.rabbitmq.com/tutorials/tutorial-six-java.html" target="_blank" rel="external">http://www.rabbitmq.com/tutorials/tutorial-six-java.html</a></p>
]]></content>
      
        <categories>
            
            <category> Rabbitmq,消息中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息中间件-Rabbitmq消息主题]]></title>
      <url>/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-Rabbitmq%E6%B6%88%E6%81%AF%E4%B8%BB%E9%A2%98.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇我们通过direct交换机，对消息进行过滤后推送给指定队列，匹配的规则还是不够灵活，因为对于一个消费者来说，它所处理的消息可能存在多重的标准，那我们注册用户的场景来说，推送给大数据服务的注册信息要有实名认证信息，对于优惠券来说，推送的优惠券包含实体店优惠券，于是需要注册信息里包含用户的地址信息，这样显然direct已经满足不了我们的需求。今天我们来学习一个满足需求的交换机类型-topic。</p>
<h2 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h2><p>和direct一样，topic和队列通过bind key进行绑定进行绑定，不同的是key不再是随意的单词，它必须是一个通过点连接的多个单词列表，如：stock.usd.nyse，quick.orange.rabbit，最长为255个字节。<br>同时bind key支持模糊匹配，topic通过<em>和#支持模糊匹配。<br><a id="more"></a><br><img src="images/rabbitMQ/topic-exchange.png" alt="RabbitMQ-direct"><br>需要注意的是：
</em>只能替代一个单词，而#可以替代零个或者多个单词。<br>这就意味着lazy.orange.male.rabbit既不匹配 <em>.orange.</em>也不会匹配到<em>.</em>.rabbit，二回匹配到lazy.#，当一个队列通过#绑定时，则和fanout类似，它将接收到所有消息，当bind key中不包含*和#时，则和direct一样工作。<br>声明一个topic exchange:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">channel.exchangeDeclare(<span class="string">"registerUser"</span>,BuiltinExchangeType.TOPIC);</div></pre></td></tr></table></figure></p>
<p>发布一个消息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">channel.basicPublish(<span class="string">"registerUser"</span>, <span class="string">"hadIdCardNo.hadAddress.userInfo"</span>, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</div></pre></td></tr></table></figure></p>
<p>消费者绑定队列：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String queueName = channel.queueDeclare().getQueue();</div><div class="line"><span class="comment">//通过bind key hadIdcardNo.#绑定到registerUser,即接收有实名信息的客户注册信息</span></div><div class="line">channel.queueBind(queueName,<span class="string">"hadIdCardNo.#"</span>,<span class="string">"hadIdcardNo"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>生产者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTopicMq</span><span class="params">(String exchange,String key,String message)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//创建连接</span></div><div class="line">            Connection connection = connectionFactory.newConnection();</div><div class="line">            Channel channel = connection.createChannel();</div><div class="line">            channel.exchangeDeclare(exchange,BuiltinExchangeType.TOPIC);</div><div class="line">            channel.basicPublish(exchange, key, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">            System.out.println(<span class="string">"send message:"</span> + message);</div><div class="line">            channel.close();</div><div class="line">            connection.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>消费者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopicMq</span><span class="params">(String exchange, <span class="keyword">int</span> i,String... keys)</span> </span>&#123;</div><div class="line">      Connection connection = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          connection = connectionFactory.newConnection();</div><div class="line">          Channel channel = connection.createChannel();</div><div class="line">          channel.exchangeDeclare(exchange, BuiltinExchangeType.TOPIC);</div><div class="line">          String queueName = channel.queueDeclare().getQueue();</div><div class="line">          <span class="keyword">for</span> (String key : keys) &#123;</div><div class="line">              channel.queueBind(queueName, exchange, key);</div><div class="line">          &#125;</div><div class="line">          System.out.println(<span class="string">"Waiting for message...."</span>);</div><div class="line">          Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></div><div class="line"><span class="function">                      <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                  String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</div><div class="line">                  System.out.println(<span class="string">"receive message:"</span> + i + message);</div><div class="line">              &#125;</div><div class="line">          &#125;;</div><div class="line">          channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMq1</span><span class="params">(String exchange, String... keys)</span> </span>&#123;</div><div class="line">      receiveTopicMq(exchange,<span class="number">1</span>,keys);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMq2</span><span class="params">(String exchange, String... keys)</span> </span>&#123;</div><div class="line">      receiveTopicMq(exchange,<span class="number">2</span>,keys);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>测试用例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicMq</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">    String exchange = <span class="string">"registerUser"</span>;</div><div class="line">    receivemqService.receiveMq1(exchange,<span class="string">"hadIdcardNo.#"</span>);</div><div class="line">    receivemqService.receiveMq2(exchange,<span class="string">"*.hadAddress.*"</span>);</div><div class="line">    sendmqService.sendTopicMq(exchange, <span class="string">"hadIdcardNo.hadAddress.userInfo"</span>,<span class="string">"Hello World!"</span>);</div><div class="line">    sendmqService.sendTopicMq(exchange, <span class="string">"noIdcardNo.hadAddress.userInfo"</span>,<span class="string">"Hello World haha!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.rabbitmq.com/tutorials/tutorial-five-java.html" target="_blank" rel="external">http://www.rabbitmq.com/tutorials/tutorial-five-java.html</a></p>
]]></content>
      
        <categories>
            
            <category> Rabbitmq,消息中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息中间件-Rabbitmq消息路由]]></title>
      <url>/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-Rabbitmq%E6%B6%88%E6%81%AF%E8%B7%AF%E7%94%B1.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇我们解决了一个消息通过fanout Exchange同时分发到多个队列进行处理，今天我们来介绍另一种类型的Exchange-direct。我们还是拿注册用户的场景来说，前面我们谈到注册成功的用户信息将同时推送给优惠券服务和大数据服务进行处理。现在有这样一个需求，注册信息中有用户实名信息的大数据服务才进行处理和分析，也就说实际上推给大数据服务的消息进行了过滤处理，当然我们完全可以通过程序来处理，接收到消息，校验是否有实名信息，没有的话直接丢弃，今天还是来讲一下将这个校验逻辑交给RabbitMQ来处理。</p>
<h2 id="Direct-exchange"><a href="#Direct-exchange" class="headerlink" title="Direct exchange"></a>Direct exchange</h2><p>前面我们说fanout这种类型的交换机只是单纯的和队列进行绑定，无脑的往队列里推送它接收到的消息。而direct的实现则要智能的多，direct允许和队列进行绑定时，指定一个或者多个参数bind key，只有当消息匹配这些个参数中的一个时，消息才会被推送到该绑定的队列。请注意是匹配多个参数中的一个时，就会被推送。<br><a id="more"></a><br><img src="images/rabbitMQ/direct-exchange.png" alt="RabbitMQ-direct"><br>上图中，我们可以看到类型为direct的交换机，绑定了两个队列，一个队列通过bing key :orange绑定，另一个则绑定了black和green两个key，这就意味着当消息匹配orange时，消息将被推送到上面的队列，当消息匹配到black或者green时，消息将被推送到下面的队列。<br>当两个队列都通过同样的一个key进行绑定时，direct就和fanout一样了，它会将消息同时推给这两个队列。<br>我们首先来声明一个direct exchange：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个名为registerUser的类型为direct的交换机</span></div><div class="line">channel.exchangeDeclare(<span class="string">"registerUser"</span>,BuiltinExchangeType.DIRECT);</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发布一个bind key 为hadIdCardNo的消息</span></div><div class="line">channel.basicPublish(<span class="string">"registerUser"</span>, <span class="string">"hadIdCardNo"</span>, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</div></pre></td></tr></table></figure>
<p>消费者队列绑定：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String queueName = channel.queueDeclare().getQueue();</div><div class="line"><span class="comment">//通过bind key hadIdcardNo绑定到registerUser.</span></div><div class="line">channel.queueBind(queueName,<span class="string">"registerUser"</span>,<span class="string">"hadIdcardNo"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>生产者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDirectMq</span><span class="params">(String exchange,String key,String message)</span></span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//创建连接</span></div><div class="line">        Connection connection = connectionFactory.newConnection();</div><div class="line">        Channel channel = connection.createChannel();</div><div class="line">        channel.exchangeDeclare(exchange,BuiltinExchangeType.DIRECT);</div><div class="line">        channel.basicPublish(exchange, key, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">        System.out.println(<span class="string">"send message:"</span> + message);</div><div class="line">        channel.close();</div><div class="line">        connection.close();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>消费者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveDirectMq</span><span class="params">(String exchange, <span class="keyword">int</span> i,String... keys)</span> </span>&#123;</div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connection = connectionFactory.newConnection();</div><div class="line">            Channel channel = connection.createChannel();</div><div class="line">            channel.exchangeDeclare(exchange, BuiltinExchangeType.DIRECT);</div><div class="line">            String queueName = channel.queueDeclare().getQueue();</div><div class="line">            <span class="keyword">for</span> (String key : keys) &#123;</div><div class="line">                channel.queueBind(queueName, exchange, key);</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"Waiting for message...."</span>);</div><div class="line">            Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></div><div class="line"><span class="function">                        <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</div><div class="line">                    System.out.println(<span class="string">"receive message:"</span> + i + message);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMq1</span><span class="params">(String exchange, String... key)</span> </span>&#123;</div><div class="line">        receiveDirectMq(exchange, <span class="number">1</span>,key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMq2</span><span class="params">(String exchange, String... key)</span> </span>&#123;</div><div class="line">        receiveDirectMq(exchange,<span class="number">2</span>, key);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>测试用例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDirectMq</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">    String exchange = <span class="string">"registerUser"</span>;</div><div class="line">    receivemqService.receiveMq1(exchange,<span class="string">"hadIdcardNo"</span>);</div><div class="line">    receivemqService.receiveMq2(exchange,<span class="keyword">new</span> String[]&#123;<span class="string">"hadIdcardNo"</span>,<span class="string">"noIdcardNo"</span>&#125;);</div><div class="line">    sendmqService.sendDirectMq(exchange, <span class="string">"hadIdcardNo"</span>,<span class="string">"Hello World!"</span>);</div><div class="line">    sendmqService.sendDirectMq(exchange, <span class="string">"noIdcardNo"</span>,<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.rabbitmq.com/tutorials/tutorial-four-java.html" target="_blank" rel="external">http://www.rabbitmq.com/tutorials/tutorial-four-java.html</a></p>
]]></content>
      
        <categories>
            
            <category> Rabbitmq,消息中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息中间件-Rabbitmq发布订阅]]></title>
      <url>/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-Rabbitmq%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇工作队列我们讲到了，当一个消费者接收到消息并成功处理，返回确认以后，RabbitMQ将消息从队列里移除，消息不回再被另外的消费者锁接收处理，但是我们会有这样的一些场景，我们接着上一篇的场景来说，如果客户注册以后，我们不仅需要根据客户注册信息给客户推送合适的优惠券，还需要将客户的注册信息同步到大数据平台进行保存并分析，这就意味着一个客户注册消息可以被多个消费者消费。这种场景就是我们很熟悉的发布订阅的模式了。今天我们来研究一下RabbitMQ的发布订阅模式。<br><a id="more"></a></p>
<h2 id="Exchanges"><a href="#Exchanges" class="headerlink" title="Exchanges"></a>Exchanges</h2><p>前面的几篇中我们讲到消息的发送和接收都是通过队列实现的，这里面我们忽略了一个重要的东西，或者说RabbitMQ给我们提供了默认的实现，让我们不必去在意这个东西，今天是时候来讲一下RabbitMQ完整的消息模型了。<br>在RabbitMQ的消息模型里，事实上，生产者不会直接将消息发送到一个队列里，可以这样说，生产者是不知道自己的消息是否会被发送到任何队列里的。生产者只会把消息发送到一个交换机上，和网络模型里的交换机一样，它接收生产者发送的消息，然后匹配路由规则，将消息分发到正确的队列里。这就意味着交换机需要知道如何处理它接收到的消息，是将消息推送到一个确定的队列耗时多个队列，还是丢弃。这些规则都取决于交换机的类型，RabbitMQ为我们提供了多种类型以适配多种规则，主要有direct, topic, headers 和 fanout。今天先来了解一下fanout这种类型的特点。在前面的几篇文章里，我们没有定义一个交换机，是因为提供了默认的交换机，我们发送消息时，设置交换机为空串，则RabbitMQ为我们自动适配到默认的交换器上。</p>
<h2 id="fanout与临时队列"><a href="#fanout与临时队列" class="headerlink" title="fanout与临时队列"></a>fanout与临时队列</h2><p>fanout这样类型的交换机很简单，它只是简单的将他所接收到的消息广播到所有它知道的队列里去。我们可以简单的通过这样的代码创建一个交换机：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个名为registerUser的fanout类型的交换机</span></div><div class="line">channel.exchangeDeclare(<span class="string">"registerUser"</span>, BuiltinExchangeType.FANOUT);</div></pre></td></tr></table></figure></p>
<p>发布消息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发布消息到确定的队列里，如queuenceName为空，则发布到所有绑定了exchange的队列里</span></div><div class="line">channel.basicPublish(<span class="string">"registerUser"</span>, queuenceName, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</div></pre></td></tr></table></figure></p>
<p>对于我们前言里提到的场景，注册用户信息需要推送到两个不同的服务里，所以在发送消息时，不需指定队列名：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发布到非持久化的队列里</span></div><div class="line">channel.basicPublish(<span class="string">"registerUser"</span>, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</div></pre></td></tr></table></figure></p>
<p>对于两个不同的服务，我们可以各自的服务里自定义一个队列，然后分别与registerUser交换机绑定，但RabbitMQ为我们提供了一种更简单的直接的方式-临时队列。临时队列提供了一种机制：当我们每次连接到Rabbit server的时候，我们都需要一个新的空的名字随机生成的队列，当我们断开连接的时候，队列能自动被删除。我们可以通过代码创建这样一个临时队列：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String queueName = channel.queueDeclare().getQueue();</div></pre></td></tr></table></figure></p>
<p>接着我们只需要将这个队列和registerUser交换机绑定：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">channel.queueBind(queueName,exchange,<span class="string">""</span>);</div></pre></td></tr></table></figure></p>
<p>绑定关系图：<br><img src="images/rabbitMQ/message-model.png" alt="RabbitMQ消息模型"></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>生产者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMq</span><span class="params">(String exchange, String queuenceName, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//创建连接</span></div><div class="line">            Connection connection = connectionFactory.newConnection();</div><div class="line">            Channel channel = connection.createChannel();</div><div class="line">            channel.exchangeDeclare(exchange,BuiltinExchangeType.FANOUT);</div><div class="line">            channel.basicPublish(exchange, queuenceName, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">            System.out.println(<span class="string">"send message:"</span> + message);</div><div class="line">            channel.close();</div><div class="line">            connection.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>消费者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMq</span><span class="params">(String exchange, String queueName，<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connection = connectionFactory.newConnection();</div><div class="line">            Channel channel = connection.createChannel();</div><div class="line">            channel.exchangeDeclare(exchange, BuiltinExchangeType.FANOUT);</div><div class="line">            <span class="keyword">if</span> (Strings.isNullOrEmpty(queueName)) &#123;</div><div class="line">                queueName = channel.queueDeclare().getQueue();</div><div class="line">            &#125;</div><div class="line">            channel.queueBind(queueName, exchange, <span class="string">""</span>);</div><div class="line">            System.out.println(<span class="string">"Waiting for message...."</span>);</div><div class="line">            Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></div><div class="line"><span class="function">                        <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</div><div class="line">                    System.out.println(<span class="string">"receive message:"</span>+ i + message);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">//自动确认</span></div><div class="line">            channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMq1</span><span class="params">(String exchange, String queueName)</span> </span>&#123;</div><div class="line">        receiveMq(exchange,queueName,<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMq2</span><span class="params">(String exchange, String queueName)</span> </span>&#123;</div><div class="line">        receiveMq(exchange,queueName,<span class="number">2</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>测试用例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPublicMq</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">    String exchange = <span class="string">"registerUser"</span>;</div><div class="line">    receivemqService.receiveMq1(exchange,<span class="string">""</span>);</div><div class="line">    receivemqService.receiveMq2(exchange,<span class="string">""</span>);</div><div class="line">    sendmqService.sendMq(exchange, <span class="string">""</span>,<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.rabbitmq.com/tutorials/tutorial-three-java.html" target="_blank" rel="external">http://www.rabbitmq.com/tutorials/tutorial-three-java.html</a></p>
]]></content>
      
        <categories>
            
            <category> Rabbitmq,消息中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息中间件-Rabbitmq工作队列]]></title>
      <url>/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-Rabbitmq%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇通过简单的例子实现了Rabbitmq的最简单的生产消费队列。这种队列的应用场景有很多，如客户在商城里注册以后，我们需要给这个客户发新手优惠券，发送的优惠券是根据用户注册时提交的一些个人爱好相关的产品的券，是个耗时的操作，注册系统不必等待也不关系是否优惠券推送成功，客户注册成功直接返回就是了，只要将客户注册信息推送给优惠券系统就可以了。这里面就会有一个问题，客户知道注册时有优惠券送的，但是当他注册完的时候，优惠券服务给他推送优惠券的时候突然宕机了，这个时候问题就来了，因为Rabbitmq的机制里，消息一旦被接收，消息就会在队列里被删除，这样这个客户注册的消息就丢失了，即便是优惠券服务重启，这个客户也不会收到优惠券了。针对这种情形，Rabbitmq给出消息确认的方案，即Message acknowledgment。<br><a id="more"></a></p>
<h2 id="Message-acknowledgment"><a href="#Message-acknowledgment" class="headerlink" title="Message acknowledgment"></a>Message acknowledgment</h2><p>前面我们已经介绍了，Message acknowledgment是使得，当消费者接收到消息之后，Rabbitmq很会等待消费者处理完消息之后，发送一个ack信号，确认已处理完毕之后，将消息从队列里移除，这样我们可以一定程度上确保消息不会在异常中丢失。在Message acknowledgment机制里，如果消息在被消费者处理中，消费者宕机或者tcp连接被关闭，Rabbitmq会认为这个消息没有被处理完，它会将这个消息重新放回队列里，被其他消费者消费掉。Rabbitmq并未设置消息超时时间，这意味着，消息可以被处理很久很久，直到最终返回结果。<br>要实现ack，我们只需要修改一下消费时的参数autoAck设置为false,取消自动ack,有程序控制，手工ack。我们还是使用上一篇的生产者代码，修改一下消费者代码：<br>消费者手工ack<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendmqServiceImpl</span> <span class="keyword">implements</span> <span class="title">SendmqService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ConnectionFactory connectionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMq</span><span class="params">(String queuenceName, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//创建连接</span></div><div class="line">            Connection connection = connectionFactory.newConnection();</div><div class="line">            Channel channel = connection.createChannel();</div><div class="line">            <span class="comment">//声明一个队列,非永久的，非排他的，非自动删除的队列</span></div><div class="line">            channel.queueDeclare(queuenceName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">            channel.exchangeDeclare(<span class="string">"registerUser"</span>, BuiltinExchangeType.FANOUT);</div><div class="line">            channel.basicPublish(<span class="string">""</span>, queuenceName, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">            System.out.println(<span class="string">"send message:"</span> + message);</div><div class="line">            channel.close();</div><div class="line">            connection.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceivemqServiceImpl</span> <span class="keyword">implements</span> <span class="title">ReceivemqService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ConnectionFactory connectionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMq</span><span class="params">(String queuenceName)</span> </span>&#123;</div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connection = connectionFactory.newConnection();</div><div class="line">            Channel channel = connection.createChannel();</div><div class="line">            channel.queueDeclare(queuenceName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">            System.out.println(<span class="string">"Waiting for message...."</span>);</div><div class="line">            Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></div><div class="line"><span class="function">                        <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        System.out.println(<span class="string">"receive message:"</span> + message);</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                        <span class="comment">//手工确认消息，确认当前id为deliveryTag的消息</span></div><div class="line">                        channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">//取消自动ack,等待程序处理结果</span></div><div class="line">            <span class="keyword">boolean</span> autoAck = <span class="keyword">false</span>;</div><div class="line">            channel.basicConsume(queuenceName, autoAck, consumer);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMq</span><span class="params">()</span> </span>&#123;</div><div class="line">    String queuenceName = <span class="string">"hello_test"</span>;</div><div class="line">    receivemqService.receiveMq(queuenceName);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">        sendmqService.sendMq(queuenceName, <span class="string">"Hello World!"</span> + i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果是这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Waiting <span class="keyword">for</span> message....</div><div class="line">send message:Hello World!<span class="number">0</span></div><div class="line">receive message:Hello World!<span class="number">0</span></div><div class="line">send message:Hello World!<span class="number">1</span></div><div class="line">receive message:Hello World!<span class="number">1</span></div><div class="line">send message:Hello World!<span class="number">2</span></div><div class="line">receive message:Hello World!<span class="number">2</span></div><div class="line">send message:Hello World!<span class="number">3</span></div><div class="line">receive message:Hello World!<span class="number">3</span></div><div class="line">send message:Hello World!<span class="number">4</span></div><div class="line">receive message:Hello World!<span class="number">4</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>这里需要说明的是,当我们把autoAck设置为false的时候，记得一定要手工ack,即 channel.basicAck，不然将会有大量的消息堆积在队列里。<br>当然这里还有一些其他的方法来ack：<br>channel.basicReject,它和basicAck有同样的效果，即RabbitMQ都会将消息从队列里移除，不同是basicAck是确认该消息已被成功处理，而basicReject则表示该消息未被处理，但仍需在从队列里移除，这种场景也有很多，比如前言里提到的场景，客户注册消息里缺少一些关键参数导致无法判断该发什么类型的优惠券，这个时候我们可以使用basicReject。<br>channel.basicNack,这个则直接表明消息未被成功处理，我们可以通过传参，告诉RabbitMQ，这个未被成功处理的消息是否该从队列里移除或者重新发送。这种场景也有许多，还是上面那个场景，给客户推送优惠券时，可能涉及远程服务调用，而调用服务异常，这个时候我们可以使用basicNack,并设置消息重发参数，告诉RabbitMQ这个消息可以重发，从而达到远程调用重试的目的。</p>
<h2 id="消息的持久化"><a href="#消息的持久化" class="headerlink" title="消息的持久化"></a>消息的持久化</h2><p>通过ack机制，我们能确保当消费者挂掉或者连接断开的时候，我们的消息不至于丢失，但是当RabbiMQ server停止或者异常挂掉，那么还处于队列里未被消费的消息将全部丢失。这个时候我们想到是类似redis缓存的持久化机制，我们可以将消息进行持久化处理。RabbitMQ支持消息的持久化。<br>首先我们需要在声明队列的时候声明为持久化队列:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</div><div class="line">channel.queueDeclare(queuenceName, durable, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
<p>然后再对发送的消息进行持久化处理，只需要在对发布消息时，设置消息的MessageProperties为PERSISTENT_TEXT_PLAIN：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">channel.basicPublish(<span class="string">""</span>, queuenceName, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(<span class="string">"UTF-8"</span>));</div></pre></td></tr></table></figure></p>
<h2 id="Publisher-Confirms"><a href="#Publisher-Confirms" class="headerlink" title="Publisher Confirms"></a>Publisher Confirms</h2><p>前面通过消费者ack和消息持久化，我们能在一定程度上保证我们的消息不会丢失，这里依旧不能绝对的保证我们的消息不会丢失，当RabbitMQ接受了一个消息，还没发送给消费者的时候，它需要仍然需要一段时间将消息写入硬盘，而RabbitMQ server崩溃就可能发生在这段时间。当然在RabbitMQ持久化实现机制中，和redis一样，并没有直接将消息同步的写入硬盘，而只是放入缓存中。这里我们介绍RabbitMQ提供的一个更强大的保障机制-Publisher Confirms。<br>在讲Publisher Confirms之前，我们先来解释几个acknowledgment的几个细节性的问题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.批量确认。我们解释一下 channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>)的作用。DeliveryTag是amqp-client为这个消息的生成的唯一单调递增的整型标识，当后面这个参数为<span class="keyword">false</span>时，RabbitMQ只确认id为DeliveryTag的这个消息，若为<span class="keyword">true</span>,则将channel里未被确认的消息全部确认掉。也就是说RabbitMQ支持批量确认。不过这个功能好像没啥用。</div><div class="line"><span class="number">2</span>.通道限制设置。我们知道消息中间件实现了一种异步流程，这其中消息发送到队列，队列发送到消费者，消费者处理消息，本质上都是异步的，这也意味着，某一时刻队列里有很多个消息待消费，对消费者来说当它在处理一个耗时的任务时，也在不停的接收着队列推过来的消息。这里就会出现大量消息堆积在消费者那里，而造成消费者端缓存过载。于是RabbitMQ为为我们提供一种机制去限制往消费者推送消息的个数。</div><div class="line">我们可以通过channel.basicQos设置channel里未确认消息的个数，当未确认消息个数达到设置的个数的时候，RabbitMQ将停止向消费者端推送消息。官网上说预设值在<span class="number">100</span>到<span class="number">300</span>之间的效果是极好的。</div><div class="line"><span class="number">3</span>.重复确认与重复推送。前面我们已经知道，当消费者未对消息进行确认的时候，RabbitMQ会将消息重新推送，这个消息会带上redeliver=<span class="keyword">true</span>的标签，这个时候我们要注意的是需要从业务逻辑层面上判断消息是否已被处理，按上面的例子说，我们要避免出现多次给新客推送优惠券的情况。同时当消费者多次对同一个DeliveryTag的消息确认时，RabbitMQ会抛出异常-类似PRECONDITION_FAILED - unknown delivery tag <span class="number">100</span>。</div><div class="line"><span class="number">4</span>.事务机制。要做到消息不丢失，我们还可以向数据库事务一样处理消息，我们将生产者提交消息到RabbitMQ的过程做成事务，一旦提交失败，我们便可以通过捕获异常进行回滚，amqp-client提供了channel.txSelect()用来将当前channel设置成事务，channel.txCommit()用来提交这个事务，提交成功则消息一旦发送到了RabbitMQ，channel.txRollback()使用于回滚事务。</div></pre></td></tr></table></figure></p>
<p>了解这些以后，我们再来解释Publisher Confirms。<br>上面我们知道使用事务，我们能确保消息一定发送给RabbitMQ，但是带来了性能问题。于是RabbitMQ为我们提供了一个思路：Publisher Confirms模式。从名字就可以看出，Publisher Confirms意味着，RabbitMQ将向生产者发送是否消息被成功的通过exchange分配到所有的队列的确认。同样的它使用basic.ack,这是模仿的消费者向RabbitMQ发送确认。那么和消费者确认类似，每一个发送到该channel的消息都被赋予一个自增的从1开始的序列号。当消息被RabbitMq正确分配之后，它会想生产者发送一个确认并包含那个唯一的序列号。同样的也通过multiple参数来支持批量确认，来表明当前序列号以前的包括当前序列号的消息一全部被分配。当RabbitMq不能成功分配消息时，它将使用nack来向生产者表明，它无法处理消息，这就意味着生产者需要重新发送消息。<br>使用Confirms的好处是因为对于生产者来说确认时异步的，他不必像事务模式那样等待消息事务提交，而是继续发送下一个消息，提高了RabbitMQ的吞吐量。同时事务模式和Confirms不能兼容，一个队列不可能同时支持两种模式。<br>对于需持久化的消息，那么确认消息将在消息被持久化到磁盘之后发送，由于RabbitMQ消息持久化到磁盘是批量的，所以强烈建议生产者确认消息也是用批量的方式。<br>和事务机制类似：RabbitMQ使用channel.confirmSelect()进入Confirms模式，如果没有设置no-wait标志的话，broker会返回confirm.select-ok表示同意发送者将当前channel信道设置为confirm模式。如果调用了channel.confirmSelect方法，默认情况下是直接将no-wait设置成false的，也就是默认情况下RabbitMQ是必须回传confirm.select-ok的。然后通过channel.waitForConfirms()确认消息是否被成功分配。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>在生产消费模式里，我们考虑这样的一个场景，两个消费者同时消费一个队列里的消息，可能出现分配给一个消费者消息处理特别耗时，而分配给另一个消费者的消息却很简单。这样就会造成一个消费者会特别繁忙，另一个却无事可做。针对这样的场景，我们可用上面提到的通道限制设置，通过在消费者端使用channel.basicQos设置prefetchCount参数为1，即告诉RabbiMQ,在消费者没有确认上一个消息的时候，不允许推送新的消息。通过这种方式我们间接的实现了消息推送的负载均衡。<br><img src="images/rabbitMQ/prefetch-count.png" alt="RabbitMQ负载均衡"><br>当所有的消费者端都忙的时候，队列将会被填满，这个时候就得当心了，或者你该考虑换别的策略了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.rabbitmq.com/tutorials/tutorial-two-java.html" target="_blank" rel="external">http://www.rabbitmq.com/tutorials/tutorial-two-java.html</a></p>
]]></content>
      
        <categories>
            
            <category> Rabbitmq,消息中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息中间件-Rabbitmq简介]]></title>
      <url>/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-Rabbitmq%E7%AE%80%E4%BB%8B.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看了redis的发布订阅的实现，觉得还是蛮鸡肋的，频道的定义和缓存数据需要程序去做绑定，消息的发送也是需要手工发送，而不是键值对更新时自动触发。于是研究了一下消息中间件的发布订阅方式，因为公司使用的Rabbitmq,顺道了解一下这个消息中间件。</p>
<h2 id="Rabbitmq简介"><a href="#Rabbitmq简介" class="headerlink" title="Rabbitmq简介"></a>Rabbitmq简介</h2><p>对生产者消费者模型熟悉的同学知道生产者消费者的概念<br>生产者（producer）：发送消息的程序<br>消费者（consumer）：接收消息的程序<br>队列（queue ）：存储并传递消息的容器<br>了解这些之后，我们可以抽象的描述一下Rabbitmq的作用了，生产者将一个消息对到队列里，消费者监听这个队列后获取到这个消息进行处理。在实际的业务运用中，可能我们会这样使用，当一个用户在统一用户中心登陆成功之后，用户中心异步推送用户登录成功的消息给广告子系统，广告子系统接收到消息后，从消息中获取中户登陆信息，根据信息给用户发送热点资讯。<br><a id="more"></a></p>
<h2 id="Rabbitmq安装"><a href="#Rabbitmq安装" class="headerlink" title="Rabbitmq安装"></a>Rabbitmq安装</h2><p>安装的问题，我就不在这里说了。照着教程就可以了。反正window下需要安装Erlang.</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>今天我们运用Rabbitmq实现简单的生产消费模式，依赖引入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.rabbitmq&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;amqp-client&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">5.1</span><span class="number">.1</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div></pre></td></tr></table></figure></p>
<p>配置连接RabbitMQ连接工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(RabbitMQConf.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RabbitMQConf rabbitMQConf;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ConnectionFactory <span class="title">createConnectionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</div><div class="line">        factory.setHost(rabbitMQConf.getHost());</div><div class="line">        factory.setVirtualHost(rabbitMQConf.getVirtualHost());</div><div class="line">        factory.setPort(rabbitMQConf.getPort());</div><div class="line">        factory.setUsername(rabbitMQConf.getUserName());</div><div class="line">        factory.setPassword(rabbitMQConf.getPassword());</div><div class="line">        <span class="keyword">return</span> factory;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>sendService:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendmqServiceImpl</span> <span class="keyword">implements</span> <span class="title">SendmqService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ConnectionFactory connectionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMq</span><span class="params">(String queuenceName, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//创建连接</span></div><div class="line">            Connection connection = connectionFactory.newConnection();</div><div class="line">            Channel channel = connection.createChannel();</div><div class="line">            <span class="comment">//声明一个队列,非持久的，非排他的，非自动删除的队列</span></div><div class="line">            channel.queueDeclare(queuenceName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">            channel.basicPublish(<span class="string">""</span>, queuenceName, <span class="keyword">null</span>, message.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">            System.out.println(<span class="string">"send message:"</span> + message);</div><div class="line">            channel.close();</div><div class="line">            connection.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>receiveService:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceivemqServiceImpl</span> <span class="keyword">implements</span> <span class="title">ReceivemqService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ConnectionFactory connectionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMq</span><span class="params">(String queuenceName)</span> </span>&#123;</div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connection = connectionFactory.newConnection();</div><div class="line">            Channel channel = connection.createChannel();</div><div class="line">            channel.queueDeclare(queuenceName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">            System.out.println(<span class="string">"Waiting for message...."</span>);</div><div class="line">            <span class="comment">//接收消息缓冲处理</span></div><div class="line">            Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></div><div class="line"><span class="function">                        <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</div><div class="line">                    System.out.println(<span class="string">"receive message:"</span> + message);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            channel.basicConsume(queuenceName, <span class="keyword">true</span>, consumer);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">SendmqService sendmqService;</div><div class="line"><span class="meta">@Autowired</span></div><div class="line">ReceivemqService receivemqService;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMq</span><span class="params">()</span></span>&#123;</div><div class="line">    String queuenceName = <span class="string">"hello_test"</span>;</div><div class="line">    receivemqService.receiveMq(queuenceName);</div><div class="line">    sendmqService.sendMq(queuenceName,<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样一个简单的生产消费队列就建立了</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.rabbitmq.com/tutorials/tutorial-one-java.html" target="_blank" rel="external">http://www.rabbitmq.com/tutorials/tutorial-one-java.html</a></p>
]]></content>
      
        <categories>
            
            <category> Rabbitmq,消息中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mybatis里的jpa的方式实现]]></title>
      <url>/mybatis%E9%87%8C%E7%9A%84jpa%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看了一些文章讨论JPA和Mybatis有什么区别，哪个更灵活，各自有什么优劣。大佬们说了很多很多的不一样，也对相关业务下的技术选型给出了一些建议。小编因为对jpa和mybatis也就业务层面上的使用而已，没深入研究过，所以也说不上他们到底有啥区别。只是觉得jpa在多表联查的动态sql的实现上实在是太麻烦，当然现在jpa已经支持视图了，对于多表的联合查询我们可以考虑使用建立视图的方式处理，其次就是jpa更新数据使用的save方法总是先查询出记录与入参进行对比，对不一致的值进行更新，在数据量大的情况下，性能应该会比mybatis低一点。jpa对于单表基本增删改查要比mybatis简单很多，jap框架已经封装了很多的操作方法，而mybatis需要我们手写sql，同时使用mybatis的话，一旦数据库表结构发生变更，那数据层的修改将会很麻烦，即便是有像mybatis generator这样的自动生成代码的工具，修改方便的前提是你没有自定的sql语句，但那总是不太可能的。小编习惯用的mybatis，最近使用maven插件里的mybatis generator生成代码的时候，发现了它为了我们提供了一种新的类似于jap的sql实现方式。</p>
<h2 id="mybatis-generator"><a href="#mybatis-generator" class="headerlink" title="mybatis generator"></a>mybatis generator</h2><p>mybatis generator是通过数据库表结构自动生成mybatis相关的映射文件以及数据实体，maven已经为我们提供了这样的一个插件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">    &lt;groupId&gt;org.mybatis.generator&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/</span>artifactId&gt;</div><div class="line">     &lt;version&gt;<span class="number">1.3</span><span class="number">.2</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">        &lt;configuration&gt;</span></div><div class="line"><span class="regexp">            &lt;verbose&gt;true&lt;/</span>verbose&gt;</div><div class="line">            &lt;overwrite&gt;<span class="literal">true</span>&lt;<span class="regexp">/overwrite&gt;</span></div><div class="line"><span class="regexp">        &lt;/</span>configuration&gt;</div><div class="line">&lt;<span class="regexp">/plugin&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>同时我们将generatorConfig.xml放入resource目录下,generatorConfig.xml配置如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE generatorConfiguration</div><div class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></div><div class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</div><div class="line">&lt;generatorConfiguration&gt;</div><div class="line">    &lt;!--数据库驱动--&gt;</div><div class="line">    &lt;classPathEntry    location=<span class="string">"E:\maven\mavenrepos\mysql\mysql-connector-java\5.1.39\mysql-connector-java-5.1.39.jar"</span>/&gt;</div><div class="line">    &lt;context id=<span class="string">"DB2Tables"</span>    targetRuntime=<span class="string">"MyBatis3"</span>&gt;</div><div class="line">        &lt;commentGenerator&gt;</div><div class="line">            &lt;property name=<span class="string">"suppressDate"</span> value=<span class="string">"true"</span>/&gt;</div><div class="line">            &lt;property name=<span class="string">"suppressAllComments"</span> value=<span class="string">"true"</span>/&gt;</div><div class="line">        &lt;<span class="regexp">/commentGenerator&gt;</span></div><div class="line"><span class="regexp">        &lt;!--数据库链接地址账号密码--&gt;</span></div><div class="line"><span class="regexp">        &lt;jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql:/</span><span class="regexp">/xxxx:3306/</span>xxx<span class="string">" userId="</span>root<span class="string">" password="</span><span class="number">123456</span><span class="string">"&gt;</span></div><div class="line"><span class="string">        &lt;/jdbcConnection&gt;</span></div><div class="line"><span class="string">        &lt;javaTypeResolver&gt;</span></div><div class="line"><span class="string">            &lt;property name="</span>forceBigDecimals<span class="string">" value="</span><span class="literal">false</span><span class="string">"/&gt;</span></div><div class="line"><span class="string">        &lt;/javaTypeResolver&gt;</span></div><div class="line"><span class="string">        &lt;!--生成Model类存放位置--&gt;</span></div><div class="line"><span class="string">        &lt;javaModelGenerator targetPackage="</span>com.upc.customer.model<span class="string">" targetProject="</span>src<span class="string">"&gt;</span></div><div class="line"><span class="string">            &lt;property name="</span>enableSubPackages<span class="string">" value="</span><span class="literal">true</span><span class="string">"/&gt;</span></div><div class="line"><span class="string">            &lt;property name="</span>trimStrings<span class="string">" value="</span><span class="literal">true</span><span class="string">"/&gt;</span></div><div class="line"><span class="string">        &lt;/javaModelGenerator&gt;</span></div><div class="line"><span class="string">        &lt;!--生成映射文件存放位置--&gt;</span></div><div class="line"><span class="string">        &lt;sqlMapGenerator targetPackage="</span>com.upc.customer.mapper<span class="string">" targetProject="</span>src<span class="string">"&gt;</span></div><div class="line"><span class="string">            &lt;property name="</span>enableSubPackages<span class="string">" value="</span><span class="literal">true</span><span class="string">"/&gt;</span></div><div class="line"><span class="string">        &lt;/sqlMapGenerator&gt;</span></div><div class="line"><span class="string">        &lt;!--生成Dao类存放位置--&gt;</span></div><div class="line"><span class="string">        &lt;javaClientGenerator type="</span>XMLMAPPER<span class="string">" targetPackage="</span>com.upc.customer.dao<span class="string">" targetProject="</span>src<span class="string">"&gt;</span></div><div class="line"><span class="string">            &lt;property name="</span>enableSubPackages<span class="string">" value="</span><span class="literal">true</span><span class="string">"/&gt;</span></div><div class="line"><span class="string">        &lt;/javaClientGenerator&gt;</span></div><div class="line"><span class="string">        &lt;!--生成对应表及类名--&gt;</span></div><div class="line"><span class="string">        &lt;table tableName="</span>user_account_view<span class="string">" domainObjectName="</span>UserAccountView<span class="string">" enableCountByExample="</span><span class="literal">false</span><span class="string">" enableUpdateByExample="</span><span class="literal">true</span><span class="string">"</span></div><div class="line"><span class="string">               enableDeleteByExample="</span><span class="literal">false</span><span class="string">" enableSelectByExample="</span><span class="literal">true</span><span class="string">"</span></div><div class="line"><span class="string">               selectByExampleQueryId="</span><span class="literal">true</span><span class="string">"&gt;&lt;/table&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    &lt;/context&gt;</span></div><div class="line"><span class="string">&lt;/generatorConfiguration&gt;</span></div></pre></td></tr></table></figure></p>
<p>执行mvn命令：mvn mybatis-generator:generate,即可生成表结构对应对象实体，mapper接口和xml映射文件。</p>
<h2 id="mybatis的jpa方式实现"><a href="#mybatis的jpa方式实现" class="headerlink" title="mybatis的jpa方式实现"></a>mybatis的jpa方式实现</h2><p>在jpa里对于单表的查询涉及动态sql的，我们一般会使用Predicate完成动态sql的拼装。大家可能很熟悉这样的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Predicate <span class="title">getInputCondition</span><span class="params">(UserInfoDTO userInfo)</span> </span>&#123;</div><div class="line">		List&lt;BooleanExpression&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		predicates.add(QUserInfo.userInfo.enableFlag.eq(EnableFlag.Y));</div><div class="line">    	<span class="keyword">if</span>(<span class="keyword">null</span> != userInfo &amp;&amp; userInfo.getUserTypeId() != <span class="keyword">null</span> &amp;&amp; !userInfo.getUserTypeId().equals(<span class="string">""</span>))&#123;</div><div class="line">			BooleanExpression findByUserType = QUserInfo.userInfo.userTypeId.eq(userInfo.getUserTypeId());</div><div class="line">			predicates.add(findByUserType);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">null</span> != userInfo &amp;&amp; userInfo.getMarketerId() != <span class="keyword">null</span> &amp;&amp; !userInfo.getMarketerId().equals(<span class="string">""</span>))&#123;</div><div class="line">			BooleanExpression findByUserType = QUserInfo.userInfo.marketerId.eq(userInfo.getMarketerId());</div><div class="line">			predicates.add(findByUserType);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ExpressionUtils.allOf(predicates.toArray(<span class="keyword">new</span> BooleanExpression[predicates.size()]));</div><div class="line">	&#125;</div><div class="line">QUserInfo为jap编译是自动通过数据实体类生成。</div></pre></td></tr></table></figure></p>
<p>而在mybatis里我们则可能在mybatis的表映射xml文件里,我们通过条件判断的方式，将动态参数加入到sql里。我们可能写这样的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;select id=<span class="string">"findUserInfoById"</span> resultMap=<span class="string">"BaseResultMap"</span> parameterType=<span class="string">"com.upc.customer.dto.UserInfoDTO"</span>&gt;</div><div class="line">        SELECT</div><div class="line">        &lt;include refid=<span class="string">"Base_Column_List"</span>/&gt;</div><div class="line">        FROM user_info</div><div class="line">        WHERE <span class="number">1</span>=<span class="number">1</span></div><div class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"status !=null"</span>&gt;</div><div class="line">            and STATUS =#&#123;status,jdbcType=CHAR&#125;</div><div class="line">        &lt;<span class="regexp">/if&gt;</span></div><div class="line"><span class="regexp">        &lt;if test="enableFlag !=null"&gt;</span></div><div class="line"><span class="regexp">            and ENABLE_FLAG = #&#123;enableFlag,jdbcType=CHAR&#125;</span></div><div class="line"><span class="regexp">        &lt;/i</span>f&gt;</div><div class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"userPhone != null"</span>&gt;</div><div class="line">            and USER_PHONE = #&#123;userPhone,jdbcType=VARCHAR&#125;</div><div class="line">        &lt;<span class="regexp">/if&gt;</span></div><div class="line"><span class="regexp">        &lt;if test="plantformId != null"&gt;</span></div><div class="line"><span class="regexp">            and PLANTFORM_ID = #&#123;plantformId,jdbcType=VARCHAR&#125;</span></div><div class="line"><span class="regexp">        &lt;/i</span>f&gt;</div><div class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"openId != null"</span>&gt;</div><div class="line">            and open_id = #&#123;openId,jdbcType=VARCHAR&#125;</div><div class="line">        &lt;<span class="regexp">/if&gt;</span></div><div class="line"><span class="regexp">        &lt;if test="customerId != null"&gt;</span></div><div class="line"><span class="regexp">            and CUSTOMER_ID = #&#123;customerId,jdbcType=VARCHAR&#125;</span></div><div class="line"><span class="regexp">        &lt;/i</span>f&gt;</div><div class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"erpNo != null"</span>&gt;</div><div class="line">            and ERP_NO = #&#123;erpNo,jdbcType=VARCHAR&#125;</div><div class="line">        &lt;<span class="regexp">/if&gt;</span></div><div class="line"><span class="regexp">        &lt;if test="userId != null"&gt;</span></div><div class="line"><span class="regexp">            and id = #&#123;userId,jdbcType=VARCHAR&#125;</span></div><div class="line"><span class="regexp">        &lt;/i</span>f&gt;</div><div class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"userRank !=null"</span>&gt;</div><div class="line">            and USER_RANK = #&#123;userRank,jdbcType=VARCHAR&#125;</div><div class="line">        &lt;<span class="regexp">/if&gt;</span></div><div class="line"><span class="regexp">        limit 1</span></div><div class="line"><span class="regexp">    &lt;/</span>select&gt;</div></pre></td></tr></table></figure></p>
<p>现在mybatis-generator为我们生成了类似jpa里QUserInfo这样的实体类，那就是后缀为Example实体类，如上面的mybatis-generator配置，我们生成了UserAccountViewExample的实体类。<br>这个类有三个属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//排序字段</span></div><div class="line"><span class="keyword">protected</span> String orderByClause;</div><div class="line"><span class="comment">//是否去重</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> distinct;</div><div class="line"><span class="comment">//查询条件，Criteria为UserAccountViewExample的内部类</span></div><div class="line"><span class="keyword">protected</span> List&lt;Criteria&gt; oredCriteria;</div></pre></td></tr></table></figure></p>
<p>我们来看看Criteria是怎么将属性值动态拼接成sql的。Criteria实现抽象类GeneratedCriteria，我们看到抽象类里每一个属性都对应着这么多个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdIsNull</span><span class="params">()</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID is null"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdIsNotNull</span><span class="params">()</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID is not null"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdEqualTo</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID ="</span>, value, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdNotEqualTo</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID &lt;&gt;"</span>, value, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdGreaterThan</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID &gt;"</span>, value, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdGreaterThanOrEqualTo</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID &gt;="</span>, value, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdLessThan</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID &lt;"</span>, value, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdLessThanOrEqualTo</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID &lt;="</span>, value, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdLike</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID like"</span>, value, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdNotLike</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID not like"</span>, value, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdIn</span><span class="params">(List&lt;String&gt; values)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID in"</span>, values, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdNotIn</span><span class="params">(List&lt;String&gt; values)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID not in"</span>, values, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdBetween</span><span class="params">(String value1, String value2)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID between"</span>, value1, value2, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> Criteria <span class="title">andIdNotBetween</span><span class="params">(String value1, String value2)</span> </span>&#123;</div><div class="line">          addCriterion(<span class="string">"ID not between"</span>, value1, value2, <span class="string">"id"</span>);</div><div class="line">          <span class="keyword">return</span> (Criteria) <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addCriterion</span><span class="params">(String condition, Object value1, Object value2, String property)</span> </span>&#123;</div><div class="line">          <span class="keyword">if</span> (value1 == <span class="keyword">null</span> || value2 == <span class="keyword">null</span>) &#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Between values for "</span> + property + <span class="string">" cannot be null"</span>);</div><div class="line">          &#125;</div><div class="line">          criteria.add(<span class="keyword">new</span> Criterion(condition, value1, value2));</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>每一个条件都是一个Criterion，多个Criterion通过and合成一个Criteria，若条件中有or则可以封装多个Criteria，通过Criteria.or()方法连接。我们来看看多个Criteria是如何在xml映射成sql的<br>CriterionUserAccountViewExample的内部类，其构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Criterion</span> </span>&#123;</div><div class="line">        <span class="comment">//条件</span></div><div class="line">        <span class="keyword">private</span> String condition;</div><div class="line">        <span class="comment">//参数值</span></div><div class="line">        <span class="keyword">private</span> Object value;</div><div class="line">        <span class="comment">//between涉及多个参数值</span></div><div class="line">        <span class="keyword">private</span> Object secondValue;</div><div class="line">        <span class="comment">//判断条件是否有传参值 如is not null</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> noValue;</div><div class="line">        <span class="comment">//判断条件是否有一个传参值 如=,like</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> singleValue;</div><div class="line">        <span class="comment">//判断条件是否有是有两个传参值 如between</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> betweenValue;</div><div class="line">        <span class="comment">//判断条件是是否有多个传参值 如In，not In</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> listValue;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String typeHandler;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getCondition</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> condition;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getSecondValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> secondValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNoValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> noValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> singleValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBetweenValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> betweenValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isListValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> listValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getTypeHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> typeHandler;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Criterion</span><span class="params">(String condition)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            <span class="keyword">this</span>.condition = condition;</div><div class="line">            <span class="keyword">this</span>.typeHandler = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">this</span>.noValue = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Criterion</span><span class="params">(String condition, Object value, String typeHandler)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            <span class="keyword">this</span>.condition = condition;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.typeHandler = typeHandler;</div><div class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> List&lt;?&gt;) &#123;</div><div class="line">                <span class="keyword">this</span>.listValue = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.singleValue = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Criterion</span><span class="params">(String condition, Object value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>(condition, value, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Criterion</span><span class="params">(String condition, Object value, Object secondValue, String typeHandler)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            <span class="keyword">this</span>.condition = condition;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.secondValue = secondValue;</div><div class="line">            <span class="keyword">this</span>.typeHandler = typeHandler;</div><div class="line">            <span class="keyword">this</span>.betweenValue = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Criterion</span><span class="params">(String condition, Object value, Object secondValue)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>(condition, value, secondValue, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>xml：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;sql id=<span class="string">"Example_Where_Clause"</span> &gt;</div><div class="line">   &lt;where &gt;</div><div class="line">     &lt;foreach collection=<span class="string">"oredCriteria"</span> item=<span class="string">"criteria"</span> separator=<span class="string">"or"</span> &gt;</div><div class="line">       &lt;<span class="keyword">if</span> test=<span class="string">"criteria.valid"</span> &gt;</div><div class="line">         &lt;trim prefix=<span class="string">"("</span> suffix=<span class="string">")"</span> prefixOverrides=<span class="string">"and"</span> &gt;</div><div class="line">           &lt;foreach collection=<span class="string">"criteria.criteria"</span> item=<span class="string">"criterion"</span> &gt;</div><div class="line">             &lt;choose &gt;</div><div class="line">               &lt;when test=<span class="string">"criterion.noValue"</span> &gt;</div><div class="line">                 and $&#123;criterion.condition&#125;</div><div class="line">               &lt;<span class="regexp">/when&gt;</span></div><div class="line"><span class="regexp">               &lt;when test="criterion.singleValue" &gt;</span></div><div class="line"><span class="regexp">                 and $&#123;criterion.condition&#125; #&#123;criterion.value&#125;</span></div><div class="line"><span class="regexp">               &lt;/</span>when&gt;</div><div class="line">               &lt;when test=<span class="string">"criterion.betweenValue"</span> &gt;</div><div class="line">                 and $&#123;criterion.condition&#125; #&#123;criterion.value&#125; and #&#123;criterion.secondValue&#125;</div><div class="line">               &lt;<span class="regexp">/when&gt;</span></div><div class="line"><span class="regexp">               &lt;when test="criterion.listValue" &gt;</span></div><div class="line"><span class="regexp">                 and $&#123;criterion.condition&#125;</span></div><div class="line"><span class="regexp">                 &lt;foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," &gt;</span></div><div class="line"><span class="regexp">                   #&#123;listItem&#125;</span></div><div class="line"><span class="regexp">                 &lt;/</span>foreach&gt;</div><div class="line">               &lt;<span class="regexp">/when&gt;</span></div><div class="line"><span class="regexp">             &lt;/</span>choose&gt;</div><div class="line">           &lt;<span class="regexp">/foreach&gt;</span></div><div class="line"><span class="regexp">         &lt;/</span>trim&gt;</div><div class="line">       &lt;<span class="regexp">/if&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>foreach&gt;</div><div class="line">   &lt;<span class="regexp">/where&gt;</span></div><div class="line"><span class="regexp"> &lt;/</span>sql&gt;</div></pre></td></tr></table></figure></p>
<p>jpa大抵也是这个套路吧，可能未来的趋势就是数据层的东西越来越抽象，抽象到对于开发者来说是透明的，开发者根本不用关心sql要怎么写，给出参数，有框架自动生成动态sql吧。</p>
]]></content>
      
        <categories>
            
            <category> mybatis </category>
            
            <category> jpa </category>
            
            <category> orm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式锁实现浅谈]]></title>
      <url>/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E6%B5%85%E8%B0%88.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看了一些关于分布式锁的实现的一些文章，发现以前写的代码存在很多的错误，对分布式的锁的理解存在很多误区，在这记录一下分布式锁的几种正确的实现方式。<br>先通过一个场景，我们来探讨一下分布式锁的一些特性。场景是这样的，订单服务部署在两台机器上，用户保存订单的时候，需要实时校验商品的库存并扣减，当两个用户的保存订单的并发请求分别被分发到在这两台机器上时，我们必须保证保存订单和商品库存的扣减就是两个需要保持一致性的写操作。这个时候我们可以对库存这一关键性的分布式资源使用分布式锁。当然可能使用一些队列来处理请求，提升用户的体验，避免因锁的存在而使用户请求被拒绝。如果库存和订单又是两个不同的服务，那还可能需要消息中间件，分布式事务等处理，这里我们只讨论对单一的分布式资源使用锁的情况。<br>如果我们把目标放一台机器上，我们可能使用，synchronized或者lock之类的同步锁，针对每一个请求，都对保存和库存扣减加锁，操作完后释放锁。分布式锁也是一样的，但是我们必须考虑一些跟单点不一样的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.加解锁一致性.多台机器都可以加锁和释放锁，我们必须保证每一次加锁和释放锁都是同一台机器，不能一台机器加的锁被另一台机器解锁。那样当加锁的机器的业务操作未完成的时候，但锁被其他机器释放，另一个请求又进来，就会出现资源不一致的情况。</div><div class="line">2.死锁。在复杂的生产环境里，我们如果解决了第一个问题的时候，可能加锁的机器在处理后续业务的时候突然宕机，锁没被释放，其他机器一直无法申请加锁，而发生死锁。</div><div class="line">3.等待加锁期间的校验。当一台机器加锁之后，另外的机器在申请加锁失败后，尝试校验过期时间，根据过期时间重试。同时考虑减少申请加锁的操作，减轻redis的压力，所以可能需要在申请加锁之前有一个等待时间。</div></pre></td></tr></table></figure></p>
<p>待着这些个问题，我们来看看如何实现分布式锁。传统实现分布式锁的方案一般是利用持久化数据库（如利用InnoDB行锁，或事务，主键或索引冲突），现在一般是利用redis，zookeeper等高效的分布式组件实现分布式锁。<br><a id="more"></a></p>
<h2 id="redis分布式锁"><a href="#redis分布式锁" class="headerlink" title="redis分布式锁"></a>redis分布式锁</h2><p>对于redis实现分布式锁，我们可以使用increment命令实现一个加锁的原子操作。这里我们使用springboot先写一个简单的加解锁方法。<br>引入依赖,这里我使用Springboot版本为1.3.6.RELEASE：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">	&lt;artifactId&gt;spring-boot-starter-redis&lt;/</span>artifactId&gt;</div><div class="line">&lt;<span class="regexp">/dependency&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;dependency&gt;</span></div><div class="line"><span class="regexp">	&lt;groupId&gt;redis.clients&lt;/g</span>roupId&gt;</div><div class="line">	&lt;artifactId&gt;jedis&lt;<span class="regexp">/artifactId&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div></pre></td></tr></table></figure></p>
<p>加锁操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String name)</span> <span class="keyword">throws</span> LockExistsException </span>&#123;</div><div class="line">     String key = keyForName(name);</div><div class="line">     <span class="keyword">if</span> (cacheService.increment(key, <span class="number">1L</span>) &gt; <span class="number">1</span>) &#123;</div><div class="line">         cacheService.expire(name, expiry);</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> LockExistsException(Constants.LOCK_EXISTS_EXCEPTION);</div><div class="line">     &#125;</div><div class="line">     cacheService.expire(name, expiry);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>释放锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(String name, String value)</span> <span class="keyword">throws</span> LockNotHeldException </span>&#123;</div><div class="line">        <span class="comment">//获取锁值</span></div><div class="line">        String stored = getValue(name);</div><div class="line">        <span class="keyword">if</span> (stored != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//锁存在</span></div><div class="line">            String key = keyForName(name);</div><div class="line">            cacheService.remove(key);</div><div class="line">            log.info(<span class="string">"释放锁"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里当机器获不到锁时，直接抛异常，由业务层对异常处理。可以看到这里，键值对的value大于等于1.当为1时，表示加锁成功。并设置了锁的有效期，避免死锁发生。<br>但在解锁的时候，非原子操作，存在一种可能：业务处理时间太长，锁过期，其他机器已成功加锁，这个时候将释放其他机器加的锁。于是我们在加解锁中加入一个标示作为value，来区别不同机器加锁。要加入value值，就要操作键值对，键值对的原子操作我们首先想到的是setnx命令，setnx命令在往redis添加键值对的时候，如果当前设置的key已存在，不做任何操作，直接返回0，不存在则添加值并返回1，我们先简单的通过spring-boot-starter-redis实现的加锁操作。spring的api里selfAbsent实现了setnx命令。<br>加锁操作:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquireLock</span><span class="params">(String name, String value)</span> <span class="keyword">throws</span> LockExistsException </span>&#123;</div><div class="line">        String key = keyForName(name);</div><div class="line">        <span class="keyword">if</span> (!cacheService.selfAbsent(key, value)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockExistsException(Constants.LOCK_EXISTS_EXCEPTION);</div><div class="line">        &#125;</div><div class="line">        cacheService.expire(name, expiry);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>value为加锁机器标示，由业务层生成。<br>释放锁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELEASE_LOCK_LUA_SCRIPT = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">(String name, String value)</span> <span class="keyword">throws</span> LockExistsException </span>&#123;</div><div class="line">        List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        keys.add(keyForName(name));</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> == cacheService.executeLua(RELEASE_LOCK_LUA_SCRIPT, keys, value)) &#123;</div><div class="line">            <span class="comment">//解锁失败</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockExistsException(Constants.LOCK_EXISTS_EXCEPTION);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>为实现解锁的原子性，我们执行lua脚本的方式删除，lua脚本很简单,当通过key获取到的值等于传入的value，即检查加解锁的标示是否一致，表明是否是同一次请求的加解锁。这样我们满足了加解锁的一致性，同时避免了死锁的发生。优化后的代码可以解决我们开头引入的场景中订单的重复提交问题，我们可以把订单id作为锁的key处理。但是对于不同用户的请求，当一个请求操作库存的时候，另一个请求应该处于申请加锁的等待过程中。于是我们可以设置一个获取锁的超时时间，超过等待时间，再抛出异常。当然依旧无法满足高并发时的订单请求，这个可以采用消息队列的方式进行处理。这里我们只讨论如何解决开头提到的第三个问题。<br>第三个问题的解决方案实现要复杂一点，总体来说就是不断的重试来获取锁，为了减轻redis压力，在重试过程中，去订阅redis锁释放的消息，当获取到redis的消息，再次重试。这里我就不重复造轮子了。给出现有的解决方案：Redisson。<br>参考：<a href="http://www.jianshu.com/p/de5a69622e49" target="_blank">Redisson 分布式锁实现分析</a><br>     <a href="https://github.com/redisson/redisson" target="_blank" rel="external">Redisson github</a></p>
<h2 id="zookeeper分布式锁"><a href="#zookeeper分布式锁" class="headerlink" title="zookeeper分布式锁"></a>zookeeper分布式锁</h2><p>使用zookeeper实现分布式锁，我们就不必在造轮子了，Apache Curator已经为我们提供了大量的zookeeper操作api,并解决了我们在操作zookeeper时的连接异常，session失效等问题。对于实现分布式锁，Curator已经提供了像InterProcessMutex可重入锁，InterProcessSemaphoreMutex不可重入锁等许多锁的解决方案。这里我只针对上面redis实现的重复提交的思路，用zookeeper来实现。<br>引入依赖：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.curator&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;curator-framework&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">2.11</span><span class="number">.1</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">    &lt;exclusions&gt;</span></div><div class="line"><span class="regexp">        &lt;exclusion&gt;</span></div><div class="line"><span class="regexp">            &lt;artifactId&gt;log4j&lt;/</span>artifactId&gt;</div><div class="line">            &lt;groupId&gt;log4j&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">        &lt;/</span>exclusion&gt;</div><div class="line">    &lt;<span class="regexp">/exclusions&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.curator&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;curator-recipes&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">2.11</span><span class="number">.1</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div></pre></td></tr></table></figure></p>
<p>实现锁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperLockServiceImpl</span> <span class="keyword">implements</span> <span class="title">ZookeeperLockService</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CuratorFramework client;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZookeeperLockServiceImpl</span><span class="params">(ZookeeperProfile zookeeperProfile)</span></span>&#123;</div><div class="line">        client = CuratorFrameworkFactory.newClient(zookeeperProfile.getConnectString(), zookeeperProfile.getRetryPolicy());</div><div class="line">        client.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acquire</span><span class="params">(String keyPath, <span class="keyword">long</span> time, TimeUnit unit)</span> </span>&#123;</div><div class="line">        InterProcessSemaphoreMutex lock = <span class="keyword">new</span> InterProcessSemaphoreMutex(client,keyPath);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">return</span> lock.acquire(time,unit);</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(String keyPath)</span> </span>&#123;</div><div class="line">        InterProcessSemaphoreMutex lock = <span class="keyword">new</span> InterProcessSemaphoreMutex(client,keyPath);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">             lock.release();</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里只是提供大概的思路，关于锁异常的处理，等待锁释放的监听，后续研究中。</p>
]]></content>
      
        <categories>
            
            <category> person idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> java </tag>
            
            <tag> zookeeper </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java里的排序-Comparator（三）]]></title>
      <url>/java%E9%87%8C%E7%9A%84%E6%8E%92%E5%BA%8F-Comparator%EF%BC%88%E4%B8%89%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇研究了List.sort()采用的老版归并排序方法-legacyMergeSort，今天研究一下经过复杂优化的排序方法-TimSort，算法有点复杂，慢慢磨。思路最重要。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>直接进入TimSort.sort方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, Comparator&lt;? <span class="keyword">super</span> T&gt; c,</span></span></div><div class="line"><span class="function"><span class="params">                         T[] work, <span class="keyword">int</span> workBase, <span class="keyword">int</span> workLen)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> c != <span class="keyword">null</span> &amp;&amp; a != <span class="keyword">null</span> &amp;&amp; lo &gt;= <span class="number">0</span> &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> nRemaining  = hi - lo;</div><div class="line">        <span class="keyword">if</span> (nRemaining &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span>;  <span class="comment">// Arrays of size 0 and 1 are always sorted</span></div><div class="line"></div><div class="line">        <span class="comment">// If array is small, do a "mini-TimSort" with no merges</span></div><div class="line">        <span class="keyword">if</span> (nRemaining &lt; MIN_MERGE) &#123;</div><div class="line">            <span class="keyword">int</span> initRunLen = countRunAndMakeAscending(a, lo, hi, c);</div><div class="line">            binarySort(a, lo, hi, lo + initRunLen, c);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * March over the array once, left to right, finding natural runs,</span></div><div class="line"><span class="comment">         * extending short natural runs to minRun elements, and merging runs</span></div><div class="line"><span class="comment">         * to maintain stack invariant.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        TimSort&lt;T&gt; ts = <span class="keyword">new</span> TimSort&lt;&gt;(a, c, work, workBase, workLen);</div><div class="line">        <span class="keyword">int</span> minRun = minRunLength(nRemaining);</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="comment">// Identify next run</span></div><div class="line">            <span class="keyword">int</span> runLen = countRunAndMakeAscending(a, lo, hi, c);</div><div class="line"></div><div class="line">            <span class="comment">// If run is short, extend to min(minRun, nRemaining)</span></div><div class="line">            <span class="keyword">if</span> (runLen &lt; minRun) &#123;</div><div class="line">                <span class="keyword">int</span> force = nRemaining &lt;= minRun ? nRemaining : minRun;</div><div class="line">                binarySort(a, lo, lo + force, lo + runLen, c);</div><div class="line">                runLen = force;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// Push run onto pending-run stack, and maybe merge</span></div><div class="line">            ts.pushRun(lo, runLen);</div><div class="line">            ts.mergeCollapse();</div><div class="line"></div><div class="line">            <span class="comment">// Advance to find next run</span></div><div class="line">            lo += runLen;</div><div class="line">            nRemaining -= runLen;</div><div class="line">        &#125; <span class="keyword">while</span> (nRemaining != <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Merge all remaining runs to complete sort</span></div><div class="line">        <span class="keyword">assert</span> lo == hi;</div><div class="line">        ts.mergeForceCollapse();</div><div class="line">        <span class="keyword">assert</span> ts.stackSize == <span class="number">1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>初始参数：<br>目标数组T[] a<br>待排序的第一个元素int lo<br>带排序的最后一个元素int hi<br>排序规则comparator c<br>我们先来通过源码理清是如何实现的排序的，再来分析TimeSort的实现原理。</p>
<h3 id="1-校验是否满足binarySort规则"><a href="#1-校验是否满足binarySort规则" class="headerlink" title="1.校验是否满足binarySort规则"></a>1.校验是否满足binarySort规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> nRemaining  = hi - lo;</div><div class="line">        <span class="keyword">if</span> (nRemaining &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (nRemaining &lt; MIN_MERGE) &#123;</div><div class="line">            <span class="keyword">int</span> initRunLen = countRunAndMakeAscending(a, lo, hi, c);</div><div class="line">            binarySort(a, lo, hi, lo + initRunLen, c);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>判断中待排序数据元素：<br>    （1）当元素数量为0或者1时，则不必排序<br>    （2）当元素数量小于MIN_MERGE（为常量32）时，采用binarySort排序。（稍后在分析）</p>
<h3 id="2-分配空间"><a href="#2-分配空间" class="headerlink" title="2.分配空间"></a>2.分配空间</h3><p>构造TimeSort实例，初始化分片的内存空间和归并时的临时空间，这里分配空间是也根据目标数组的长度做了最适合的分配。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">TimSort&lt;T&gt; ts = <span class="keyword">new</span> TimSort&lt;&gt;(a, c, work, workBase, workLen);</div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="title">TimSort</span><span class="params">(T[] a, Comparator&lt;? <span class="keyword">super</span> T&gt; c, T[] work, <span class="keyword">int</span> workBase, <span class="keyword">int</span> workLen)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.a = a;</div><div class="line">       <span class="keyword">this</span>.c = c;</div><div class="line">       <span class="keyword">int</span> len = a.length;</div><div class="line">       <span class="keyword">int</span> tlen = (len &lt; <span class="number">2</span> * INITIAL_TMP_STORAGE_LENGTH) ?</div><div class="line">           len &gt;&gt;&gt; <span class="number">1</span> : INITIAL_TMP_STORAGE_LENGTH;</div><div class="line">       <span class="keyword">if</span> (work == <span class="keyword">null</span> || workLen &lt; tlen || workBase + tlen &gt; work.length) &#123;</div><div class="line">           <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"UnnecessaryLocalVariable"</span>&#125;)</div><div class="line">           T[] newArray = (T[])java.lang.reflect.Array.newInstance</div><div class="line">               (a.getClass().getComponentType(), tlen);</div><div class="line">           tmp = newArray;</div><div class="line">           tmpBase = <span class="number">0</span>;</div><div class="line">           tmpLen = tlen;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span> &#123;</div><div class="line">           tmp = work;</div><div class="line">           tmpBase = workBase;</div><div class="line">           tmpLen = workLen;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">int</span> stackLen = (len &lt;    <span class="number">120</span>  ?  <span class="number">5</span> :</div><div class="line">                       len &lt;   <span class="number">1542</span>  ? <span class="number">10</span> :</div><div class="line">                       len &lt; <span class="number">119151</span>  ? <span class="number">24</span> : <span class="number">49</span>);</div><div class="line">       runBase = <span class="keyword">new</span> <span class="keyword">int</span>[stackLen];</div><div class="line">       runLen = <span class="keyword">new</span> <span class="keyword">int</span>[stackLen];</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-计算最小分片长度"><a href="#3-计算最小分片长度" class="headerlink" title="3.计算最小分片长度"></a>3.计算最小分片长度</h3><p>通过minRunLength计算最小分片长度，低于这个长度，采用binarySort排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int minRun = minRunLength(nRemaining);</div></pre></td></tr></table></figure></p>
<h3 id="4-do-while"><a href="#4-do-while" class="headerlink" title="4.do while"></a>4.do while</h3><p>do while循环里每次获取一个升序的分片长度，判断该长度是否小于最小分片长度，小于最小长度，使用binarySort排序。<br>分析一下binarySort排序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">binarySort</span><span class="params">(T[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> start,</span></span></div><div class="line"><span class="function"><span class="params">                                       Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> lo &lt;= start &amp;&amp; start &lt;= hi;</div><div class="line">        <span class="keyword">if</span> (start == lo)</div><div class="line">            start++;</div><div class="line">        <span class="keyword">for</span> ( ; start &lt; hi; start++) &#123;</div><div class="line">            T pivot = a[start];</div><div class="line"></div><div class="line">            <span class="comment">// Set left (and right) to the index where a[start] (pivot) belongs</span></div><div class="line">            <span class="keyword">int</span> left = lo;</div><div class="line">            <span class="keyword">int</span> right = start;</div><div class="line">            <span class="keyword">assert</span> left &lt;= right;</div><div class="line">            <span class="comment">/*</span></div><div class="line"><span class="comment">             * Invariants:</span></div><div class="line"><span class="comment">             *   pivot &gt;= all in [lo, left).</span></div><div class="line"><span class="comment">             *   pivot &lt;  all in [right, start).</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">                <span class="keyword">int</span> mid = (left + right) &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (c.compare(pivot, a[mid]) &lt; <span class="number">0</span>)</div><div class="line">                    right = mid;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    left = mid + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">assert</span> left == right;</div><div class="line"></div><div class="line">            <span class="comment">/*</span></div><div class="line"><span class="comment">             * The invariants still hold: pivot &gt;= all in [lo, left) and</span></div><div class="line"><span class="comment">             * pivot &lt; all in [left, start), so pivot belongs at left.  Note</span></div><div class="line"><span class="comment">             * that if there are elements equal to pivot, left points to the</span></div><div class="line"><span class="comment">             * first slot after them -- that's why this sort is stable.</span></div><div class="line"><span class="comment">             * Slide elements over to make room for pivot.</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            <span class="keyword">int</span> n = start - left;  <span class="comment">// The number of elements to move</span></div><div class="line">            <span class="comment">// Switch is just an optimization for arraycopy in default case</span></div><div class="line">            <span class="keyword">switch</span> (n) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:  a[left + <span class="number">2</span>] = a[left + <span class="number">1</span>];</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:  a[left + <span class="number">1</span>] = a[left];</div><div class="line">                         <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>: System.arraycopy(a, left, a, left + <span class="number">1</span>, n);</div><div class="line">            &#125;</div><div class="line">            a[left] = pivot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看到binarySort对一个升序的分片进行了扩展，使它扩展到最小分片长度，并使用二分法对扩展分片进行排序。进入binarySort时，目标数组从lo到start是有序的，只需要将start到hi的元素通过二分法定位插入到已有序的序列中，这样整个从lo到hi就有序了。<br>接着通过runBase和runLen记录该分片的起始位置和长度<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ts.pushRun(lo, runLen);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushRun</span><span class="params">(<span class="keyword">int</span> runBase, <span class="keyword">int</span> runLen)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.runBase[stackSize] = runBase;</div><div class="line">    <span class="keyword">this</span>.runLen[stackSize] = runLen;</div><div class="line">    stackSize++;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后就可以尝试着将多个分片进行归并了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ts.mergeCollapse();</div><div class="line"></div><div class="line">lo += runLen;</div><div class="line">nRemaining -= runLen;</div></pre></td></tr></table></figure></p>
<p>我们来看mergeCollapse这个函数，这是TimSort的核心算法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeCollapse</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">while</span> (stackSize &gt; <span class="number">1</span>) &#123;</div><div class="line">           <span class="keyword">int</span> n = stackSize - <span class="number">2</span>;</div><div class="line">           <span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; runLen[n-<span class="number">1</span>] &lt;= runLen[n] + runLen[n+<span class="number">1</span>]) &#123;</div><div class="line">               <span class="keyword">if</span> (runLen[n - <span class="number">1</span>] &lt; runLen[n + <span class="number">1</span>])</div><div class="line">                   n--;</div><div class="line">               mergeAt(n);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (runLen[n] &lt;= runLen[n + <span class="number">1</span>]) &#123;</div><div class="line">               mergeAt(n);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">break</span>; <span class="comment">// Invariant is established</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里有两个条件的判断：当多个分片长度不满足以下条件是，合并分片被执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.runLen[i - <span class="number">3</span>] &gt; runLen[i - <span class="number">2</span>] + runLen[i - <span class="number">1</span>]    </div><div class="line"><span class="number">2</span>.runLen[i - <span class="number">2</span>] &gt; runLen[i - <span class="number">1</span>]</div></pre></td></tr></table></figure></p>
<p>我们可以这么理解，当条件1不被满足时，runLen[i - 2] ，runLen[i - 1]合并，合并之后，那么条件2也就不能被满足，继续合并。<br>继续看mergeAt的归并过程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeAt</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> stackSize &gt;= <span class="number">2</span>;</div><div class="line">        <span class="keyword">assert</span> i &gt;= <span class="number">0</span>;</div><div class="line">        <span class="keyword">assert</span> i == stackSize - <span class="number">2</span> || i == stackSize - <span class="number">3</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> base1 = runBase[i];</div><div class="line">        <span class="keyword">int</span> len1 = runLen[i];</div><div class="line">        <span class="keyword">int</span> base2 = runBase[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> len2 = runLen[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">assert</span> len1 &gt; <span class="number">0</span> &amp;&amp; len2 &gt; <span class="number">0</span>;</div><div class="line">        <span class="keyword">assert</span> base1 + len1 == base2;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Record the length of the combined runs; if i is the 3rd-last</span></div><div class="line"><span class="comment">         * run now, also slide over the last run (which isn't involved</span></div><div class="line"><span class="comment">         * in this merge).  The current run (i+1) goes away in any case.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        runLen[i] = len1 + len2;</div><div class="line">        <span class="keyword">if</span> (i == stackSize - <span class="number">3</span>) &#123;</div><div class="line">            runBase[i + <span class="number">1</span>] = runBase[i + <span class="number">2</span>];</div><div class="line">            runLen[i + <span class="number">1</span>] = runLen[i + <span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">        stackSize--;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Find where the first element of run2 goes in run1. Prior elements</span></div><div class="line"><span class="comment">         * in run1 can be ignored (because they're already in place).</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">int</span> k = gallopRight(a[base2], a, base1, len1, <span class="number">0</span>, c);</div><div class="line">        <span class="keyword">assert</span> k &gt;= <span class="number">0</span>;</div><div class="line">        base1 += k;</div><div class="line">        len1 -= k;</div><div class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Find where the last element of run1 goes in run2. Subsequent elements</span></div><div class="line"><span class="comment">         * in run2 can be ignored (because they're already in place).</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        len2 = gallopLeft(a[base1 + len1 - <span class="number">1</span>], a, base2, len2, len2 - <span class="number">1</span>, c);</div><div class="line">        <span class="keyword">assert</span> len2 &gt;= <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (len2 == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Merge remaining runs, using tmp array with min(len1, len2) elements</span></div><div class="line">        <span class="keyword">if</span> (len1 &lt;= len2)</div><div class="line">            mergeLo(base1, len1, base2, len2);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            mergeHi(base1, len1, base2, len2);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在对入参做了一些常规校验以后，更新了存储分片信息数组，因为两个分片已经有序，所以可以采用一些小技巧完成合并。一直贴代码还是不好，我们继续看gallopLeft和gallopRight，<br>可以理解的是gallopRight通过二分法，找到了分片2的头在分片1的位置k，gallopLeft则通过二分法，找到分片1的尾在分片2的位置len2，这样我们只需要对a[base1+k]~a[base1+len1]与a[base2]~a[base2+len2]进行归并算法，新的大分片的头拷贝分片1的剩余的元素，尾拷贝分片2剩余的元素。</p>
]]></content>
      
        <categories>
            
            <category> 排序算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java里的排序-Comparator（二）]]></title>
      <url>/java%E9%87%8C%E7%9A%84%E6%8E%92%E5%BA%8F-Comparator%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇讲到了list集合排序用到的Cellection.sort使用了归并排序，今天我们来研究一下java里是怎么样实现的归并排序。这里使用jdk的版本是jdk1.8的版本。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>我们看到Cellection.sort回调了list的sort方法，该方法在java.util里面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</div><div class="line">        Object[] a = <span class="keyword">this</span>.toArray();</div><div class="line">        Arrays.sort(a, (Comparator) c);</div><div class="line">        ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</div><div class="line">        <span class="keyword">for</span> (Object e : a) &#123;</div><div class="line">            i.next();</div><div class="line">            i.set((E) e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里有调用了Array.sort方法进行排序，Array是什么样的存在呢。我们看这个类的说明：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* <span class="function">This class contains various methods <span class="keyword">for</span> manipulating <span class="title">arrays</span> <span class="params">(such as</span></span></div><div class="line"><span class="function"><span class="params">* sorting and searching)</span>. This class also contains a <span class="keyword">static</span> factory</span></div><div class="line"><span class="function">* that allows arrays to be viewed as lists.</span></div></pre></td></tr></table></figure></p>
<p>我们稍稍可以窥探一点list集合底层的实现原理-数组实现。Array提供了数组的排序和搜索操作，同时提供了工厂方法让数组以列表的形式展示。<br><a id="more"></a><br>继续往下走:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</div><div class="line">           sort(a);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (LegacyMergeSort.userRequested)</div><div class="line">               legacyMergeSort(a, c);</div><div class="line">           <span class="keyword">else</span></div><div class="line">               TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里有一个标示位,我们看看这个标示位含义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * Old merge sort implementation can be selected (for</span></div><div class="line"><span class="comment">    * compatibility with broken comparators) using a system property.</span></div><div class="line"><span class="comment">    * Cannot be a static boolean in the enclosing class due to</span></div><div class="line"><span class="comment">    * circular dependencies. To be removed in a future release.</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LegacyMergeSort</span> </span>&#123;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> userRequested =</div><div class="line">           java.security.AccessController.doPrivileged(</div><div class="line">               <span class="keyword">new</span> sun.security.action.GetBooleanAction(</div><div class="line">                   <span class="string">"java.util.Arrays.useLegacyMergeSort"</span>)).booleanValue();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>是的，已经很明显了，旧版本的归并排序要在将来的版本淘汰了，这个标示位还是通过配置文件才生效的。知道这些之后，我们就想问那么legacyMergeSort和TimSort有什么区别呢。<br>TimSort在归并排序的基础上做了大量的优化，是一种复杂的排序算法，既然legacyMergeSort是老版本，那么相对低阶一点，OK,我们先从低阶学起。</p>
<h3 id="legacyMergeSort"><a href="#legacyMergeSort" class="headerlink" title="legacyMergeSort"></a>legacyMergeSort</h3><p>直接进入legacyMergeSort里调用的mergeSort方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Src is the source array that starts at index 0</span></div><div class="line"><span class="comment">     * Dest is the (possibly larger) array destination with a possible offset</span></div><div class="line"><span class="comment">     * low is the index in dest to start sorting</span></div><div class="line"><span class="comment">     * high is the end index in dest to end sorting</span></div><div class="line"><span class="comment">     * off is the offset into src corresponding to low in dest</span></div><div class="line"><span class="comment">     * To be removed in a future release.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(Object[] src,</span></span></div><div class="line"><span class="function"><span class="params">                                  Object[] dest,</span></span></div><div class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> off,</span></span></div><div class="line"><span class="function"><span class="params">                                  Comparator c)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> length = high - low;</div><div class="line"></div><div class="line">        <span class="comment">// Insertion sort on smallest arrays</span></div><div class="line">        <span class="keyword">if</span> (length &lt; INSERTIONSORT_THRESHOLD) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=low; i&lt;high; i++)</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&gt;low &amp;&amp; c.compare(dest[j-<span class="number">1</span>], dest[j])&gt;<span class="number">0</span>; j--)</div><div class="line">                    swap(dest, j, j-<span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Recursively sort halves of dest into src</span></div><div class="line">        <span class="keyword">int</span> destLow  = low;</div><div class="line">        <span class="keyword">int</span> destHigh = high;</div><div class="line">        low  += off;</div><div class="line">        high += off;</div><div class="line">        <span class="keyword">int</span> mid = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">        mergeSort(dest, src, low, mid, -off, c);</div><div class="line">        mergeSort(dest, src, mid, high, -off, c);</div><div class="line"></div><div class="line">        <span class="comment">// If list is already sorted, just copy from src to dest.  This is an</span></div><div class="line">        <span class="comment">// optimization that results in faster sorts for nearly ordered lists.</span></div><div class="line">        <span class="keyword">if</span> (c.compare(src[mid-<span class="number">1</span>], src[mid]) &lt;= <span class="number">0</span>) &#123;</div><div class="line">           System.arraycopy(src, low, dest, destLow, length);</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Merge sorted halves (now in src) into dest</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = destLow, p = low, q = mid; i &lt; destHigh; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (q &gt;= high || p &lt; mid &amp;&amp; c.compare(src[p], src[q]) &lt;= <span class="number">0</span>)</div><div class="line">                dest[i] = src[p++];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                dest[i] = src[q++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看看这个方法的描述，很明显这是一个归并排序，但和归并排序有那么一些不一样，我们具体来分析分析。<br>首先src是目标集合dest的一个拷贝，初始偏移量off为0，可以看到这里对归并排序做了一些优化。<br>优化点1：第一个if：当集合的大小在INSERTIONSORT_THRESHOLD =7以下时，优先使用插入排序。<br>优化点2：int mid = (low + high) &gt;&gt;&gt; 1;划分两个子序列使用移位运算符，右移移位，相当于除2,但比除法快<br>优化点3：判断序列是否已有序，有序则直接将子序列拷贝到目标集合<br>优化点4：直接拷贝整个集合代替递归分配的两个子序列，减少了递归的中的空间分配<br>优化点5：合并子序列的循环中，p,q分别代表两个子序列的起始值。当一个序列元素全部填充到目标集合后，直接将另一个序列剩余元素填充到目标集合。</p>
<h3 id="归并排序优化"><a href="#归并排序优化" class="headerlink" title="归并排序优化"></a>归并排序优化</h3><p>根据java里低阶的归并优化版本，将上一篇的归并排序进行优化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INSERTSORT_THRESHOLD = <span class="number">7</span>;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="keyword">int</span>[] legacyMergeSore(<span class="keyword">int</span>[] num, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</div><div class="line">     <span class="comment">//拷贝目标数组</span></div><div class="line">     <span class="keyword">int</span>[] cloneNum = num.clone();</div><div class="line">     <span class="keyword">return</span> mergeSort(cloneNum, num, left, right);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">private</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] cloneNum, <span class="keyword">int</span>[] num, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</div><div class="line">     <span class="keyword">int</span> length = right - left;</div><div class="line">     <span class="keyword">if</span> (length &lt; INSERTSORT_THRESHOLD) &#123;</div><div class="line">         <span class="comment">//采用插入排序算法</span></div><div class="line">         InsertSort insertSort = <span class="keyword">new</span> InsertSort();</div><div class="line">         insertSort.insertSort(num, left, right);</div><div class="line">         <span class="keyword">return</span> num;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">int</span> baseIndex = (left + right) &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">     mergeSort(num, cloneNum, left, baseIndex);</div><div class="line">     mergeSort(num, cloneNum, baseIndex, right);</div><div class="line">     merge(num, cloneNum, left, baseIndex, right);</div><div class="line">     <span class="keyword">return</span> num;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * 合并序列</span></div><div class="line"><span class="comment">  *</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> num</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> cloneNum</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> left</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> baseIndex</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> right</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span>[] cloneNum, <span class="keyword">int</span> left, <span class="keyword">int</span> baseIndex, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">     <span class="comment">//校验是否有序，因为baseIndex为第二个子序列的起始值，且两个子序列已有序</span></div><div class="line">     <span class="keyword">if</span> (cloneNum[baseIndex - <span class="number">1</span>] &lt;= cloneNum[baseIndex]) &#123;</div><div class="line">         <span class="comment">//两子序列之间已有序，直接拷贝到目标序列</span></div><div class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt; right; i++) &#123;</div><div class="line">             num[i] = cloneNum[i];</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> j = left, p = left, q = baseIndex; j &lt; right; j++) &#123;</div><div class="line">         <span class="keyword">if</span> (q &gt;= right || p &lt; baseIndex &amp;&amp; cloneNum[p] &lt; cloneNum[q]) &#123;</div><div class="line">             num[j] = cloneNum[p++];</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             num[j] = cloneNum[q++];</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">     LegacyMergeSort legacyMergeSort = <span class="keyword">new</span> LegacyMergeSort();</div><div class="line">     <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</div><div class="line">     legacyMergeSort.legacyMergeSore(num,<span class="number">0</span>,num.length);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>有时间可以研究一下TimeSort，再来写笔记吧。</p>
]]></content>
      
        <categories>
            
            <category> 排序算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java里的排序-Comparator（一）]]></title>
      <url>/java%E9%87%8C%E7%9A%84%E6%8E%92%E5%BA%8F-Comparator%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在排序算法上进阶之后，我们来看看这些算法的实践，最近工作上涉及一些list对象的排序，用到了Collections.sort。一直对Collections.sort里实现的Comparator到底怎么实现的升序和降序。研究了一下源码，Comparator底层实现是用来归并算法。归并算法在上一篇已经做了介绍的铺垫。今天我们来说一下这个sort的用法和实现原理。</p>
<h3 id="实现Comparator"><a href="#实现Comparator" class="headerlink" title="实现Comparator"></a>实现Comparator</h3><p>java8之前，我们对list排队多半是实现一个Comparator接口，先定义一个简单的实体类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>然后我们根据name对一个person列表进行简单的排序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorService</span> <span class="keyword">extends</span> <span class="title">BaseTestService</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Person&gt; personList;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        personList = Lists.newArrayList(<span class="keyword">new</span> Person(<span class="string">"f"</span>,<span class="number">20</span>),</div><div class="line">                <span class="keyword">new</span> Person(<span class="string">"c"</span>,<span class="number">21</span>),<span class="keyword">new</span> Person(<span class="string">"g"</span>,<span class="number">18</span>),<span class="keyword">new</span> Person(<span class="string">"e"</span>,<span class="number">18</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@After</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printPersonList</span><span class="params">()</span></span>&#123;</div><div class="line">        personList.stream().forEach(person -&gt; System.err.println(person.getName()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//比较</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compareWithInnerClass</span><span class="params">()</span></span>&#123;</div><div class="line">        Collections.sort(personList, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> i= o1.getName().compareTo(o2.getName());</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>o1.getName().compareTo(o2.getName())这样写的时候是升序的，o2.getName().compareTo(o2.getName())就是降序的。这里Collections.sort实际还是调用了java.util.List的sort方法。</p>
<h3 id="使用comparing"><a href="#使用comparing" class="headerlink" title="使用comparing"></a>使用comparing</h3><p>java8为Comparator提供了新的静态方法，例子：<br>    @Test<br>    public void compareWithLamda(){<br>        Collections.sort(personList,Comparator.comparing(Person::getName));<br>    }<br>结果为默认是升序的，如果我们要反序呢，很简单，有个Comparator有一个反序的方法：reversed（）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compareWithLamdaReversed</span><span class="params">()</span></span>&#123;</div><div class="line">    Collections.sort(personList,Comparator.comparing(Person::getName).reversed());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>扩展：Comparator还提供了支持多个比较条件的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compareWithLamdaMore</span><span class="params">()</span></span>&#123;</div><div class="line">    Collections.sort(personList,Comparator.comparing(Person::getName).thenComparing(Person::getAge));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用Lambda表达式"><a href="#使用Lambda表达式" class="headerlink" title="使用Lambda表达式"></a>使用Lambda表达式</h3><p>java8在java.util.List里新增了支持lambda的sort方法可以直接使用,代码更简洁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compareWithNewSort</span><span class="params">()</span></span>&#123;</div><div class="line">   personList.sort((p1,p2)-&gt; p1.getName().compareTo(p2.getName()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然这里也支持多条件排序的，我们可以在Person里自定义一个排序的静态方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareWithNameAndAge</span><span class="params">(Person p1, Person p2)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (p1.getName().equals(p2.getName())) &#123;</div><div class="line">        <span class="keyword">return</span> p1.getAge() - p2.getAge();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p1.getName().compareTo(p2.getName());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">compareWithLamdaMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    personList.sort(Person::compareWithNameAndAge);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总之java8排序方法形式有很多，但万变不离其宗都是使用了List.sort()方法，下一个笔记，我们来分析一下源码。</p>
]]></content>
      
        <categories>
            
            <category> 排序算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[归并排序]]></title>
      <url>/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>荒废一周之后，趁着加班打酱油的机会，记录一下最近一周玩的排序算法-归并排序。归并排序的思想还是用到了分治的思路，相较于快排的整体有序之后再分治，归并的思路在于分治之后，将分治后得到的多个有序集合合并。归并算法的平均时间复杂度为O(nlgn).</p>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并的一种实现方式是将序列分成两个包含n/2各元素的子序列，然后分别对这两个序列进行递归排序，最后将这个两个有序的序列合并，得到一个完整的有序序列。<br>这里我们还是先来一份伪代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">mergeSort(a,l,r)</div><div class="line">  <span class="keyword">if</span> l &lt; r</div><div class="line">      q = (l + r )/<span class="number">2</span></div><div class="line">      mergeSort(a,l,q)</div><div class="line">      mergeSort(a,q+<span class="number">1</span>,r)</div><div class="line">      merge(a,l,q,r)</div><div class="line"></div><div class="line">merge(a,l,q,r)</div><div class="line">   length1 = q-l+<span class="number">1</span>;</div><div class="line">   length2 = r-q;</div><div class="line">   <span class="keyword">new</span> L[length1+<span class="number">1</span>] </div><div class="line">   <span class="keyword">new</span> R[length2+<span class="number">1</span>]</div><div class="line">   <span class="keyword">for</span> i: <span class="number">1</span> to length1</div><div class="line">       L[i]=a[l+i-<span class="number">1</span>] </div><div class="line">   L[length1 -<span class="number">1</span>] = Max</div><div class="line">   <span class="keyword">for</span> j: <span class="number">1</span> to length2</div><div class="line">       L[j]=a[q+i]</div><div class="line">   R[length2 -<span class="number">1</span>] = Max</div><div class="line">   i =<span class="number">1</span></div><div class="line">   j=<span class="number">1</span></div><div class="line">   <span class="keyword">for</span> k : l to r</div><div class="line">       <span class="keyword">if</span> L[i]&lt;R[j]</div><div class="line">          a[k] = L[i]</div><div class="line">          i++</div><div class="line">       <span class="keyword">else</span></div><div class="line">          a[k] = R[j]</div><div class="line">          j++</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>从伪代码我们可以看到：归并算法的核心在于merge，和快排不一样的是，归并需要开辟两个临时空间存储已排序序列。分配完空间后并初始化两个临时有序序列后，将两个序列进行归并到源序列上。<br>我们分析一下这个归并过程：<br>当L[i] &lt; R[j] 时 a[k] =L[i]，此时满足<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">（<span class="number">1</span>）i &lt;=x&lt;q    a[k] &lt;= L[x] 即保证a[k]为剩下未比较L[],R[]中最小的。</div></pre></td></tr></table></figure></p>
<p>在伪代码里，两个临时序列尾部添加一个无穷大值，是为了当两个序列各只有一个值时，归并发生两次会发生指针越界的问题。</p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] megerSort(<span class="keyword">int</span>[] num, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</div><div class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">int</span> baseIndex = (left + right) / <span class="number">2</span>;</div><div class="line">        megerSort(num, left, baseIndex);</div><div class="line">        megerSort(num, baseIndex + <span class="number">1</span>, right);</div><div class="line">        merge(num, left, baseIndex, right);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> num;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> left, <span class="keyword">int</span> baseIndex, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="comment">//初始化两个临时有序序列</span></div><div class="line">    <span class="keyword">int</span>[] leftNum = <span class="keyword">new</span> <span class="keyword">int</span>[baseIndex - left + <span class="number">1</span> + <span class="number">1</span>];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; baseIndex - left + <span class="number">1</span>; i++) &#123;</div><div class="line">        leftNum[i] = num[left + i];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//序列尾部添加无穷大</span></div><div class="line">    leftNum[baseIndex - left + <span class="number">1</span>] = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">int</span>[] rightNum = <span class="keyword">new</span> <span class="keyword">int</span>[right - baseIndex + <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; right - baseIndex; j++) &#123;</div><div class="line">        rightNum[j] = num[baseIndex + j + <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    rightNum[right - baseIndex] = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt;= right; k++) &#123;</div><div class="line">        <span class="keyword">if</span> (leftNum[i] &lt; rightNum[j]) &#123;</div><div class="line">            num[k] = leftNum[i];</div><div class="line">            i++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            num[k] = rightNum[j];</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</div><div class="line">    MergeSort mergeSort = <span class="keyword">new</span> MergeSort();</div><div class="line">    <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</div><div class="line">    num = mergeSort.megerSort(num, <span class="number">0</span>, num.length - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>同快速排序算法，在最理想的情况下，megerSort序列分为规模不大于n/2的两个子序列,而merge的复杂度为r-l+1 =O(n),所以我们得出归并的时间复杂度计算公式：<br>            T(n) = 2T(n/2) + O(n)<br>求解得T(n) = O(nlgn)</p>
]]></content>
      
        <categories>
            
            <category> 排序算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[快速排序]]></title>
      <url>/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>掌握了基础的排序算法，就可以在进阶高级的算法的路上渐行渐远了。今天试着学习一下高端一点的排序算法，快速排序。快速排序的期望时间复杂度较前面低端的要好一点为O(nlgn)。</p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序的思想运用了二分的思路，找一个基准点，将大于基准点的放右边，小于基准点的放左边。每一次循环完，以基准线分割两边，分别寻找基准点重复循环操作。在网上看了许多不同的实现方式，今天在这里介绍一下学院派的实现方式。<br>我们知道二分实际上是个递归的过程，快速排序就是对基准点两边进行递归，那么核心的是如何进行基准点的选取和基准点一边的递归实现。<br>我们先来一份伪代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">quickSort(a,l,r)</div><div class="line">  <span class="keyword">if</span> l &lt; r</div><div class="line">     q = partition(a,l,r)</div><div class="line">     quickSort(a,l,q-<span class="number">1</span>)</div><div class="line">     quickSort(a,q+<span class="number">1</span>,l)</div><div class="line">partition(a,l,r)</div><div class="line">  key = a[r] </div><div class="line">  i = l-<span class="number">1</span></div><div class="line">  j = l</div><div class="line">  <span class="keyword">while</span>(j &lt; r)</div><div class="line">      <span class="keyword">if</span> a[j]&lt;=key</div><div class="line">         i++</div><div class="line">         exchange a[i] with a[j]</div><div class="line">    j++</div><div class="line">  exchange a[i+<span class="number">1</span>] with a[r]  </div><div class="line">  <span class="keyword">return</span> i+<span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>这里初始的基准点为数组尾元素，分析一下核心的排序函数partition，我们可以得出这样的规律：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">j从数组第一个元素开始递增，i从空开始递增，每当数组元素a[j]中小于a[r]时，i++并a[i]与a[j]交互。这样使得：</div><div class="line">1.当 i&lt;k&lt;j时，a[k]&gt;a[r]</div><div class="line">2.当 l&lt;=k&lt;=i时，a[k]&lt;=a[r]</div></pre></td></tr></table></figure></p>
<p>从中我们可以发现，经过一轮循环后，将数组分割成大于基准点和小于基准点两部分，而基准点的位置则在i+1处，所以循环结束后，将a[r]与a[i+1]交换，实现整个数组的分割。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] num, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</div><div class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">            <span class="keyword">int</span> baseIndex = partiton(num, left, right);</div><div class="line">            quickSort(num, left, baseIndex - <span class="number">1</span>);</div><div class="line">            quickSort(num, baseIndex + <span class="number">1</span>, right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partiton</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> baseIndex = right;</div><div class="line">        <span class="keyword">int</span> i = left - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> j = left;</div><div class="line">        <span class="keyword">int</span> key = num[baseIndex];</div><div class="line">        <span class="keyword">while</span> (j &lt; right) &#123;</div><div class="line">            <span class="keyword">if</span> (num[j] &lt;= key) &#123;</div><div class="line">                i++;</div><div class="line">                exchange(num, i, j);</div><div class="line">            &#125;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        exchange(num, i + <span class="number">1</span>, baseIndex);</div><div class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = num[j];</div><div class="line">        num[j] = num[i];</div><div class="line">        num[i] = temp;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>在最理想的情况下，partition得到的两个子数组的规模都不超过n/2,而partition的复杂度为r-l+1 =O(n),所以我们得出快排的时间复杂度计算公式：<br>            T(n) = 2T(n/2) + O(n)<br>求解得T(n) = O(nlgn)</p>
]]></content>
      
        <categories>
            
            <category> 排序算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>每次做笔记都喜欢加点前言，好像很高大上的样子。最近在研究爬虫，其中涉及到深度广度遍历算法。想想这几年已经把大学学的数据结构算法设计都忘的一干二净了。想着不能这么废下去了，慢慢来，一点一点补。<br>还是那句话，只要想学习了，什么时候都不晚,教操作系统的教授说过的话，真的是可以一辈子调侃的话了。先从最基础的算法回忆起，学C的时候学的排序算法：简单选择排序和冒泡排序。</p>
<h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p>对于简单选择排序，我的理解是每次拿出一个值，和剩下的所有值进行比较，选出最小（大）的值，每轮循环结束，将比较值与最值进行交换，当所有的值都被拿出来与其他值比较后，即为有序数列。<br>例子：升序排序<br>初始值的状态：6 3 5 2 1 7<br>一轮循环结束：<em>1</em> 3 5 2 <em>6</em> 7<br>二轮循环结束：1 <em>2</em> 5 <em>3</em> 6 7<br>三轮循环结束：1 2 <em>3</em> <em>5</em> 6 7<br>四轮循环结束：1 2 3 5 6 7<br>五轮循环结束：1 2 3 5 6 7<br>一轮循环中：6和3 5 2 1 7都进行比较，1是最小值，循环结束，然后将6和1交换位置，这样最小值被选出。<br>一轮循环中：3和5 2 6 7都进行比较，2是最小值，循环结束，然后将3和2交换位置，这样最小值被选出。<br>依次循环得出有序数组。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] choose(<span class="keyword">int</span>[] num) &#123;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> index = i;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; num.length; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (num[index] &gt; num[j]) &#123;</div><div class="line">                    index = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (index != i)&#123;</div><div class="line">                temp = num[i];</div><div class="line">                num[i] = num[index];</div><div class="line">                num[index] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>该算法平均时间复杂度为(n-1)+(n-2)+…+1=n(n-1)/2=O(n2)</p>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序的思想和选择差不多，冒泡的思想每次都从下往上两两比较，互换位置，就像气泡不停往上冒一样，每次循环选出一个最值放到队头。<br>例子：升序排序<br>初始值的状态：6 3 5 2 1 7<br>    第一次：6 3 5 2 1 7<br>    第二次：6 3 5 1 2 7<br>    第三次：6 3 1 5 2 7<br>    第四次：6 1 3 5 2 7<br>    第五次：1 6 3 5 2 7<br>一轮循环结束：1 6 3 5 2 7<br>    第一次：1 6 3 5 2 7<br>    第二次：1 6 3 2 5 7<br>    第三次：1 6 2 3 5 7<br>    第四次：1 2 6 3 5 7<br>二轮循环结束：1 2 6 3 5 7<br>    。。。<br>三轮循环结束：1 2 3 6 5 7<br>    。。。<br>四轮循环结束：1 2 3 5 6 7<br>    。。。<br>五轮循环结束：1 2 3 5 6 7<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] bubble(<span class="keyword">int</span> num[]) &#123;</div><div class="line">       <span class="comment">//优化标志位，若内层一次循环未发生交换则说明数组已为有序</span></div><div class="line">       <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">       <span class="comment">//外层控制循环次数</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length &amp;&amp; flag; i++) &#123;</div><div class="line">           flag = <span class="keyword">false</span>;</div><div class="line">           <span class="comment">//内层从队尾往上遍历</span></div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = num.length - <span class="number">1</span>; j &gt; i; j--) &#123;</div><div class="line">               <span class="keyword">if</span> (num[j] &lt; num[j - <span class="number">1</span>]) &#123;</div><div class="line">                   <span class="keyword">int</span> temp = num[j - <span class="number">1</span>];</div><div class="line">                   num[j - <span class="number">1</span>] = num[j];</div><div class="line">                   num[j] = temp;</div><div class="line">                   sortNum++;</div><div class="line">                   flag = <span class="keyword">true</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> num;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里加上一个flag标示，表示若在内层一次循环中，未发生任何交换，则说明数列已有序。排序可结束。<br>冒泡排序的平均时间复杂度为(n-1)+(n-2)+…+1=n(n-1)/2=O(n2)</p>
]]></content>
      
        <categories>
            
            <category> 排序算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单爬虫（二）-selenium的使用]]></title>
      <url>/%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%EF%BC%88%E4%BA%8C%EF%BC%89-selenium%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇我已经解除了爬虫的一些理念，那就是模拟http请求网页，后去返回的静态html，通过jsoup解析，获取页面的上的你想要的数据。但是有些情况下，页面数据是动态通过js加载的，这时候你从返回的静态页里是获取不到任何有效数据的，还有一种情况是有些网页下只有登录了，才能看到你想要的数据。这个时候selenium的作用就体现出来了。</p>
<h3 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h3><p>selenium是一款自动化测试工具，通过它我们可以通过代码的来模拟操控浏览器鼠标来获取我们想要的数据。今天我们来模拟一下自动登录腾讯视频。使用selenium我们需要引入依赖：<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">           &lt;groupId&gt;org.seleniumhq.selenium&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">           &lt;artifactId&gt;selenium-java&lt;/</span>artifactId&gt;</div><div class="line">           &lt;version&gt;<span class="number">3.7</span><span class="number">.1</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">           &lt;exclusions&gt;</span></div><div class="line"><span class="regexp">               &lt;exclusion&gt;</span></div><div class="line"><span class="regexp">                   &lt;groupId&gt;com.google.guava&lt;/g</span>roupId&gt;</div><div class="line">                   &lt;artifactId&gt;guava&lt;<span class="regexp">/artifactId&gt;</span></div><div class="line"><span class="regexp">               &lt;/</span>exclusion&gt;</div><div class="line">           &lt;<span class="regexp">/exclusions&gt;</span></div><div class="line"><span class="regexp">       &lt;/</span>dependency&gt;</div><div class="line">       &lt;dependency&gt;</div><div class="line">           &lt;groupId&gt;com.google.guava&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">           &lt;artifactId&gt;guava&lt;/</span>artifactId&gt;</div><div class="line">           &lt;version&gt;<span class="number">22.0</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">       &lt;/</span>dependency&gt;</div></pre></td></tr></table></figure></p>
<p>这里是有个坑的，selenium3.7.1的版本依赖的guava版本太高，有个方法已经找不到，会导致报错，所以我单独引入了低版本的guava。<br>要想selenium去操控浏览器，就需要一个驱动去做适配。小编用的chrome，所以自然选择chromedriver。<br>下载地址：<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="external">http://chromedriver.storage.googleapis.com/index.html</a><br>注意这里也是有坑的，chromedriver一定要和你使用的浏览器版本有对应关系，小编在这里呗坑了好久。这里我给出一个网上的大神出的映射表：<a href="http://blog.csdn.net/huilan_same/article/details/51896672" target="_blank" rel="external">http://blog.csdn.net/huilan_same/article/details/51896672</a><br>第三个坑就是启动selenium的时候，由于其socket端口可能超过window默认允许的最大端口号大小（win7可能会有），需要在系统配置里设置一下最大端口号。具体操作的说明地址，小编忘记了。。。。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        WebDriver driver;</div><div class="line"></div><div class="line">        System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, <span class="string">"D:/tools/chromedriver/chromedriver.exe"</span>);<span class="comment">//这一步必不可少</span></div><div class="line"></div><div class="line">        driver = <span class="keyword">new</span> ChromeDriver();</div><div class="line"></div><div class="line">        driver.manage().timeouts().implicitlyWait(<span class="number">2</span>, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">        driver.get(<span class="string">"https://v.qq.com/"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            WebElement webElement = driver.findElement(By.xpath(<span class="string">"//div[@class='quick_item quick_user']"</span>));</div><div class="line">            Actions action = <span class="keyword">new</span> Actions(driver);</div><div class="line">            <span class="comment">//模拟鼠标停到头像上</span></div><div class="line">            action.moveToElement(webElement).perform();</div><div class="line">            <span class="comment">//必须休眠一下，等登录框按钮出现</span></div><div class="line">            Thread.sleep(<span class="number">500L</span>);</div><div class="line">            webElement = driver.findElement(By.xpath(<span class="string">"//div[@class='quick_pop_btn']"</span>));</div><div class="line">            webElement.click();</div><div class="line">            webElement = driver.findElement(By.xpath(<span class="string">"//div[@class='login_btns']"</span>));</div><div class="line">            WebElement qqloginElement = webElement.findElement(By.xpath(<span class="string">"//a[@class='btn_qq _login_type_item']"</span>));</div><div class="line">            qqloginElement.click();</div><div class="line">            Thread.sleep(<span class="number">500L</span>);</div><div class="line">            <span class="comment">//切换iframe,使用账号密码登陆</span></div><div class="line">            driver.switchTo().frame(<span class="string">"_login_frame_quick_"</span>);</div><div class="line">            WebElement loginElement = driver.findElement(By.xpath(<span class="string">"//div[@class='login']"</span>));</div><div class="line">            WebElement loginElementWithAccount = loginElement.findElement(By.xpath(<span class="string">"//div[@class='bottom hide']"</span>));</div><div class="line">            loginElementWithAccount = loginElementWithAccount.findElement(By.xpath(<span class="string">"//a[@id='switcher_plogin']"</span>));</div><div class="line">            loginElementWithAccount.click();</div><div class="line">            loginElementWithAccount = driver.findElement(By.xpath(<span class="string">"//div[@class='web_qr_login']"</span>));</div><div class="line">            loginElementWithAccount = loginElementWithAccount.findElement(By.xpath(<span class="string">"//div[@class='web_qr_login_show']"</span>)).findElement(By.xpath(<span class="string">"//div[@class='web_login']"</span>)).</div><div class="line">                    findElement(By.xpath(<span class="string">"//div[@class='login_form']"</span>));</div><div class="line">            loginElementWithAccount.findElement(By.xpath(<span class="string">"//div[@class='uinArea']"</span>)).findElement(By.id(<span class="string">"u"</span>)).clear();</div><div class="line">            <span class="comment">//设置账号</span></div><div class="line">            loginElementWithAccount.findElement(By.xpath(<span class="string">"//div[@class='uinArea']"</span>)).findElement(By.id(<span class="string">"u"</span>)).sendKeys(<span class="string">"XXXX"</span>);</div><div class="line">            loginElementWithAccount.findElement(By.xpath(<span class="string">"//div[@class='pwdArea']"</span>)).findElement(By.id(<span class="string">"p"</span>)).clear();</div><div class="line">            <span class="comment">//设置密码</span></div><div class="line">            loginElementWithAccount.findElement(By.xpath(<span class="string">"//div[@class='pwdArea']"</span>)).findElement(By.id(<span class="string">"p"</span>)).sendKeys(<span class="string">"XXXXX"</span>);</div><div class="line">            loginElementWithAccount.findElement(By.xpath(<span class="string">"//div[@class='submit']"</span>)).findElement(By.xpath(<span class="string">"//a[@class='login_button']"</span>)).click();</div><div class="line">            Thread.sleep(<span class="number">100L</span>);</div><div class="line">            Set&lt;Cookie&gt; cookies = driver.manage().getCookies();</div><div class="line">            <span class="comment">//保存cookie</span></div><div class="line">            redisTemplate.opsForSet().add(<span class="string">"cookie"</span>, cookies);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.err.println(e);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != driver) &#123;</div><div class="line">                driver.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单爬虫（一）]]></title>
      <url>/%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>荒废的时光。。。。。果然有些东西真的是一时心血来潮，坚持真的很重要的。最近也是心血来潮，研究了一下网络爬虫的套路。其实很简单，就是模拟http请求网页，然后获取静态的html字符串，使用解析工具解析html获取你想要的结果。我不知道说的对不对，可能真正写爬虫的会觉得这种想法是很low。我也想了解更深次的爬虫，可以一直爬的爬虫，什么深度遍历广度遍历算法，异步解析啊，这里面学问很深。不过不要紧，慢慢来，万丈高楼平地起，由简入难，坚持，总有一天你会成功的。</p>
<h3 id="简单爬虫-获取腾讯视频vip视频url"><a href="#简单爬虫-获取腾讯视频vip视频url" class="headerlink" title="简单爬虫-获取腾讯视频vip视频url"></a>简单爬虫-获取腾讯视频vip视频url</h3><p>最先接触爬虫，我能想到的就是获取静态页的视频url.所以就拿腾讯视频练练手。前面也说了，我的方法很简单就是模拟http请求，然后解析html。<br><a id="more"></a></p>
<h3 id="HttpClients"><a href="#HttpClients" class="headerlink" title="HttpClients"></a>HttpClients</h3><p>模拟http请求，我用了最简单的apache的httpclient包。依赖如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;httpclient&lt;/</span>artifactId&gt;</div><div class="line">&lt;<span class="regexp">/dependency&gt;</span></div></pre></td></tr></table></figure></p>
<p>因为是用springboot集成的，我用是springboot1.5.3，它依赖的httpclient版本是4.5.3。</p>
<h3 id="jsoup"><a href="#jsoup" class="headerlink" title="jsoup"></a>jsoup</h3><p>通过httpGet请求获取到返回结果后，我们就需要对返回结果对解析，从中提取我们想要的视频url。这里我用了爬虫大神都会用的jsoup工具。依赖如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.jsoup&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;jsoup&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">1.10</span><span class="number">.3</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div></pre></td></tr></table></figure></p>
<p>我们先看看腾讯视频的视频地址的静态页：<br><img src="images/crawler/videoUrl.png" alt="视频url"><br><img src="images/crawler/videoUrlDetail.png" alt="视频url"><br>点开其中一个item，我们可以看到里面包括了视频的url，视频的头像url，视频的描述，评分，大家看有mark_v的clsaa，那是视频的一个标签，表示vip,用劵，付费等观看条件。知道这些以后那很简单，我们通过jsoup提供的select方法获取标签元素，在遍历元素，获取元素的属性等信息，就拿到了我们想要的结果了。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>源码我就不贴了，有兴趣到我github上去看看，写的很low,还需要优化。</p>
]]></content>
      
        <categories>
            
            <category> springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot单元测试的默认配置]]></title>
      <url>/springboot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近根据<a href="https://tech.meituan.com/MT_Leaf.html" target="_blank">Leaf——美团点评分布式ID生成系统</a>中Leaf-snowflake方案的思路，实现了一个简单版本的分布式ID生成方法。在这过程中遇到了一些问题，在这里把问题记下来，当个错题集吧，觉得low的看官，请勿拍砖。因为只是一个简单的生成id方法，我并未想着去将之做成单个服务，而是一个工具包的形式，让有需求的应用系统依赖这个包。所以这个时候就要考虑单个系统部署集群的时候在zookeeper里的节点如何配置。于是我能想到了是根据ip和端口号去唯一标示集群里的单个服务。然后我们的问题来了。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当我在Springboot的配置文件里配置服务的端口号，然后单元测试的时候，却怎么也获取不到这个端口号。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">he application.properties:</div><div class="line">server.port = <span class="number">30008</span></div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@SpringApplicationConfiguration</span>(CustomerCenterApplication.class)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTestService</span> </span>&#123;</div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</div><div class="line">String serverPort;</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(serverPort);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>打印的结果很让人意外，是-1，而不是null之类的。在这个问题是纠结了一天之后，我选择升级springboot的版本，采用1.4.0以上的版本,采用以下的代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTestService</span> </span>&#123;</div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;local.server.port&#125;"</span>)或者<span class="meta">@LocalServerPort</span></div><div class="line">String serverPort;</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(serverPort);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>很神奇，可是为什么呢，还是那句话，源码不会骗人。既然是配置的问题，我们来看看Springboot启动测试的时候是如何加载配置的，我们立马想到@SpringApplicationConfiguration这个注解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ContextConfiguration</span>(loader = SpringApplicationContextLoader.class)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringApplicationConfiguration &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到通过这个注解，springboot加载了一个SpringApplicationContextLoader来完成上下文的配置加载。我们来看看这个loader做了些什么事。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ApplicationContext <span class="title">loadContext</span><span class="params">(<span class="keyword">final</span> MergedContextConfiguration config)</span></span></div><div class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		assertValidAnnotations(config.getTestClass());</div><div class="line">		SpringApplication application = getSpringApplication();</div><div class="line">		application.setMainApplicationClass(config.getTestClass());</div><div class="line">		application.setSources(getSources(config));</div><div class="line">		ConfigurableEnvironment environment = <span class="keyword">new</span> StandardEnvironment();</div><div class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(config.getActiveProfiles())) &#123;</div><div class="line">			setActiveProfiles(environment, config.getActiveProfiles());</div><div class="line">		&#125;</div><div class="line">		Map&lt;String, Object&gt; properties = getEnvironmentProperties(config);</div><div class="line">		addProperties(environment, properties);</div><div class="line">		...</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>我们看到 通过getEnvironmentProperties(config)获取配置文件配置信息，然后放到environment里。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">getEnvironmentProperties</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">		MergedContextConfiguration config)</span> </span>&#123;</div><div class="line">	Map&lt;String, Object&gt; properties = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</div><div class="line">	<span class="comment">// JMX bean names will clash if the same bean is used in multiple contexts</span></div><div class="line">	disableJmx(properties);</div><div class="line">	properties.putAll(TestPropertySourceUtils</div><div class="line">			.convertInlinedPropertiesToMap(config.getPropertySourceProperties()));</div><div class="line">	<span class="keyword">if</span> (!TestAnnotations.isIntegrationTest(config)) &#123;</div><div class="line">		properties.putAll(getDefaultEnvironmentProperties());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> properties;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getDefaultEnvironmentProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> Collections.singletonMap(<span class="string">"server.port"</span>, <span class="string">"-1"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>真想是如此简单。在最新的Springboot版本里这个方法改动很大，但依旧默认将端口设置为-1<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> String[] getInlinedProperties(MergedContextConfiguration config) &#123;</div><div class="line">        ArrayList&lt;String&gt; properties = <span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">this</span>.disableJmx(properties);</div><div class="line">        properties.addAll(Arrays.asList(config.getPropertySourceProperties()));</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isEmbeddedWebEnvironment(config) &amp;&amp; !<span class="keyword">this</span>.hasCustomServerPort(properties)) &#123;</div><div class="line">            properties.add(<span class="string">"server.port=-1"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (String[])properties.toArray(<span class="keyword">new</span> String[properties.size()]);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>想想大概是测试的时候不对外暴露服务吧。</p>
]]></content>
      
        <categories>
            
            <category> person idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最近的困惑]]></title>
      <url>/%E6%9C%80%E8%BF%91%E7%9A%84%E5%9B%B0%E6%83%91.html</url>
      <content type="html"><![CDATA[<p>##序<br>好长时间没写日记了，果然是心血来潮，一时兴起之作罢了。所谓的坚持也不过那么几分钟，难怪会失败的一塌涂地。这段时间好像又在虚度了，不知道干啥，也不知道干了啥，每天都觉得很累，却不知道累了什么。<br>想去学一些东西，却越学越困惑。</p>
<p>##模式设计<br>回头看看自己写过的项目代码，那个惨不忍睹，想着去学学模式设计，千辛万苦从网上捣腾了大话设计模式，菜鸟和老鸟的对话，很通俗。看了几个设计模式突然发现，几个模式虽然功能不一样，但是在实现确实那么相似，在平常的工作中好像用哪一个都可以，好像哪个都不用也都可以。没有一个适用的场景，或者说我不懂怎么使用吧。</p>
<p>##框架<br>小编的公司使用springboot作为基本框架，顺带着使用了jpa作为数据库中间件。可是小编擅长mybatis，或者说习惯自己写sql。jpa将增删改查封装，基本上告别了sql时代，Mysql通过xml拼装sql，可以灵活操作数据库。于是小编很困惑的是jpa和mybatis到底哪个好。</p>
<p>##爬虫<br>心血来潮，玩玩了爬虫，想着爬爬腾讯视频的视频地址，然后做个网站，通过缓存cookie，让vip视频免费看。小编的思路很简单：爬到腾讯视频vip视频链接保存，然后通过页面展示，点击url，跳转后台，后台封装我自己的在腾讯视频登陆的后缓存cookie，然后饭后重定向到腾讯视频地址。cookie通过selenium模拟获取并缓存redis。很简单的想法，最后以失败告终。对https请求不熟，不知道怎么封装cookie，也不太懂http,困惑。</p>
<p>##算法<br>心血来潮，去刷LeetCode的题，突然发现这些个题都是用来面试的。我想我很难会把这些个算法啥的用在自己所做的业务上吧。</p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式ID生成方法]]></title>
      <url>/%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95.html</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近小编在为雪花算法在应用部署集群时候，需要修改配置文件workerId，然后重新打包部署而苦恼。在网上看到了美团的Leaf-snowflake的方案<a href="https://tech.meituan.com/MT_Leaf.html" target="_blank">Leaf——美团点评分布式ID生成系统</a>，觉得很不错，可惜没有开源，于是自己尝试着按照其思路写一个简单的版本的Leaf-snowflake实现来生成分布式的全局ID.</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>关于雪花算法，我在这里就不做过多的介绍了，由41位的时间戳，10位的workerId和12位的序列号组成一个64位（首位不用）的long型数。<br><img src="/images/snowflake/snowflake.png" alt="snowflake原理"><br>在一些优化版本里，将十位的workerId拆分为五位的workerId和五位的datacenterId，workerId通过系统配置文件配置，datacenterId可以是当前运行线程的id，或者服务器ip取hash生成。<br>而序列号则在一毫秒里从0递增，一毫秒能产生的最大序列号2047，即一毫秒可以产生的Id为2047个。<br>通过配置文件配置workerId就会出现小编说的问题。一个应用在多台服务器上部署，那么为了是ID不冲突，workerId须配置不一样，这样一个应用要打多次包，很痛苦。<br>所以Leaf-snowflake方案使用Zookeeper持久顺序节点的特性自动对snowflake节点配置wokerId。这样就不用手动配置workerId了。<br><a id="more"></a><br>现在我们思路很清晰，通过snowflake生成id之前，我们通过zookeeper获取workerId，为了对zookeeper弱依赖，提高性能，我们对workerId进行本地缓存，也就是说我们只在第一次请求的时候通过zookeeper初始化workerId。接下来就只剩一个问题了，如何唯一标识一个节点，即确保一个应用集群里的多个节点分配到的workerId不同。<br>小编在这里使用了ip加端口的方法去标识唯一节点。主要的流程如下:<br><img src="/images/snowflake/workerId.png" alt="workerId生成流程"><br>每一个应用通过应用名和环境配置注册一个父节点，而应用集群里的多个节点则通过ip和端口注册为多个子节点。这样多个子节点的workerId就随注册的先后顺序而递增。</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>对于zookeeper的连接和使用采用CuratorFramework，pom依赖：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.curator&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">        &lt;artifactId&gt;curator-framework&lt;/</span>artifactId&gt;</div><div class="line">        &lt;version&gt;<span class="number">2.11</span><span class="number">.1</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">            &lt;exclusions&gt;</span></div><div class="line"><span class="regexp">                &lt;exclusion&gt;</span></div><div class="line"><span class="regexp">                    &lt;artifactId&gt;log4j&lt;/</span>artifactId&gt;</div><div class="line">                    &lt;groupId&gt;log4j&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">                &lt;/</span>exclusion&gt;</div><div class="line">            &lt;<span class="regexp">/exclusions&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.curator&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;curator-recipes&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">2.11</span><span class="number">.1</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div></pre></td></tr></table></figure></p>
<p>zookeeper连接实体：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperProfile</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 应用的ip</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String ipAddress;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 应用的端口</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String serverPort;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 配置的根目录</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String rootNode = <span class="string">"id_sequence"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 环境设置, 如dev, test. prod</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String environment;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * zookeeper的连接地址; 如127.0.0.1:2181;</span></div><div class="line"><span class="comment">     * 多个时用逗号分开，如: 192.168.7.52:2181, 192.168.7.53:2181</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String connectString;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 序列号的空间， 一般使用当前的application名。</span></div><div class="line"><span class="comment">     * 一个空间分配的id是唯一的</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String sequenceSpaceName;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 重试的策略</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> RetryPolicy retryPolicy;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取workerId主要方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Long <span class="title">getWorkId</span><span class="params">(String name, String ipAndPort)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       <span class="keyword">if</span> (Strings.isNullOrEmpty(name)) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> WorkIdException(<span class="string">"workId name is null"</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (Strings.isNullOrEmpty(ipAndPort)) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> WorkIdException(<span class="string">"workId ipAndPort is null"</span>);</div><div class="line">       &#125;</div><div class="line">       String zookeeperIdNodePath = ZKPaths.makePath(zookeeperProfile.getBaseNode(), name);</div><div class="line">       RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">50</span>, <span class="number">29</span>, <span class="number">500</span>);</div><div class="line">       RetryPolicy lock_RetryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">50</span>, <span class="number">10</span>, <span class="number">500</span>);</div><div class="line">       String lockPath = zookeeperIdNodePath + <span class="string">"_$lock"</span>;</div><div class="line">       PromotedToLock.Builder builder = PromotedToLock.builder().lockPath(lockPath).timeout(<span class="number">100</span>, TimeUnit.MILLISECONDS).retryPolicy(lock_RetryPolicy);</div><div class="line">       DistributedAtomicLong dal = <span class="keyword">new</span> DistributedAtomicLong(client, zookeeperIdNodePath, retryPolicy, builder.build());</div><div class="line">       String zookeeperIdNodechildPath = ZKPaths.makePath(zookeeperIdNodePath, ipAndPort);</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">null</span> == client.checkExists().forPath(zookeeperIdNodechildPath)) &#123;</div><div class="line">           <span class="comment">//不存在当前子节点,父节点自增，并将值写入子节点</span></div><div class="line">           AtomicValue&lt;Long&gt; value = dal.increment();</div><div class="line">           <span class="keyword">if</span> (value.succeeded()) &#123;</div><div class="line">               lockPath = zookeeperIdNodechildPath + <span class="string">"_$lock"</span>;</div><div class="line">               builder = PromotedToLock.builder().lockPath(lockPath).timeout(<span class="number">100</span>, TimeUnit.MILLISECONDS).retryPolicy(lock_RetryPolicy);</div><div class="line">               dal = <span class="keyword">new</span> DistributedAtomicLong(client, zookeeperIdNodechildPath, retryPolicy, builder.build());</div><div class="line">               AtomicValue&lt;Long&gt; childValue = dal.trySet(value.postValue());</div><div class="line">               <span class="keyword">if</span> (childValue.succeeded()) &#123;</div><div class="line">                   <span class="keyword">return</span> childValue.postValue();</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> WorkIdException(<span class="string">"child DistributedAtomicLong inclement fail."</span>);</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> WorkIdException(<span class="string">"DistributedAtomicLong inclement fail."</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       lockPath = zookeeperIdNodechildPath + <span class="string">"_$lock"</span>;</div><div class="line">       builder = PromotedToLock.builder().lockPath(lockPath).timeout(<span class="number">100</span>, TimeUnit.MILLISECONDS).retryPolicy(lock_RetryPolicy);</div><div class="line">       dal = <span class="keyword">new</span> DistributedAtomicLong(client, zookeeperIdNodechildPath, retryPolicy, builder.build());</div><div class="line">       AtomicValue&lt;Long&gt; value = dal.get();</div><div class="line">       <span class="keyword">if</span> (value.succeeded()) &#123;</div><div class="line">           <span class="keyword">return</span> value.postValue();</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> WorkIdException(<span class="string">"child DistributedAtomicLong get fail."</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> person idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> java </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程里的一些概念（一）]]></title>
      <url>/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%87%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前阵子，研究了一下分布式唯一ID的生成方法，接触了多线程的一些东西，发现自己对并发编程的一些基础概念还是一无所知，对于并发的控制还是停留在synchronized的层面，简直不能再低级了，小编可是要成为架构师的男人，怎么可以如此堕落。于是可劲各种谷歌了。今天做一点基础的入门笔记，简单介绍一下多线程编程里的一些概念。</p>
<h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><p>从最基本的开始，我们知道线程最基本的实现有两种。实现Runable接口和继承Thread重写run方法。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is myThread1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is myThread2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread1 = <span class="keyword">new</span> MyThread1();</div><div class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread2());</div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在JDK1.5后我们有第三种方法实现，那就是实现Callable接口,Callable和Runable区别主要是Callable的call方法有返回值同时能抛出异常，而Runable的run方法没有。同时运行Callable任务能够拿到一个Future对象，通过Future对象我们可以检查任务是否完成，检索任务执行的结果，同时可以取消任务的执行，弥补了Thread的不足。<br>Callable无法通过new Thread(Runable r)来实现。通常我们可以通过FutureTask来实现，FutureTask实现了Runnable和Future，使得我们依旧能通过Thread启动线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is myThread3"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread thread1 = <span class="keyword">new</span> MyThread1();</div><div class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread2());</div><div class="line">        FutureTask&lt;Boolean&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Boolean&gt;(<span class="keyword">new</span> MyThread3());</div><div class="line">        Thread thread3 = <span class="keyword">new</span> Thread(futureTask);</div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line">        thread3.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>当然我们也可以通过ExecutorService来实现，ExecutorService是线程池里一个概念。我们接着看看线程池的实现。</p>
<h2 id="线程池的实现"><a href="#线程池的实现" class="headerlink" title="线程池的实现"></a>线程池的实现</h2><p>在java 5之后，java.util.concurrent里提供了现成的线程池的实现。这个包里的线程的类图：<br><img src="/images/thread/Executor.png" alt="Executor"><br>看看相关的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</div><div class="line">    Future&lt;?&gt; submit(Runnable task);</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executors</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60L</span>, TimeUnit.SECONDS, </div><div class="line">                            <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到ExecutorService通过继承Executor定义了一个线程池，默认线程池实现是ThreadPoolExecutor。我们可以通过Executors创建线程池。<br>Executors里提供了四种线程池的实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个固定大小的线程池，每次任务从线程池中获取一个空闲线程来执行任务，若无空闲线程则创建新的线程直到线程数达到线程池的最大大小。一旦线程数达到最大数，保持大小不变，在有任务进来则等待线程空闲</span></div><div class="line">newFixedThreadPool(<span class="keyword">int</span> nThreads);</div><div class="line"><span class="comment">//创建一个单线程的线程池，即只有一个线程的线程池，所有的任务都串行执行。想不出这个线程的作用，顺序执行意味着可以使任务的执行顺序按照任务提交顺序执行。</span></div><div class="line">newSingleThreadExecutor();</div><div class="line"><span class="comment">//创建一个可根据需要创建新线程的线程池，没有固定的大小，但是可以像newFixedThreadPool一样创建新的线程。</span></div><div class="line"><span class="comment">//其实是有线程数的限制（最大线程数为Integer.MAX_VALUE，在初始化的时候默认设定的），它会将那些已有超过设定的超时时间未被使用的线程从池中移除，估计在高并发情况下使用这个可能会有内存溢出的异常</span></div><div class="line">newCachedThreadPool();</div><div class="line"><span class="comment">//创建一个大小无限的线程池(这个估计和newCachedThreadPool一样也设定了默认最大线程数)，此线程池支持定时以及周期性执行任务的需求。</span></div><div class="line">newScheduledThreadPool();</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[神奇的springboot注解]]></title>
      <url>/%E7%A5%9E%E5%A5%87%E7%9A%84springboot%E6%B3%A8%E8%A7%A3.html</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>小编接触springboot的时间很短，平时也就拿着已经成熟的框架，写着无关痛痒的业务代码，在看druid的源码的时候，涉猎了很多注解，发现通过简单的一个注解，使大量的配置属性初始化到bean里，对我这种还停留在@value级别的小白来说简直大开眼界了。今天想着介绍一下springboot里我刚刚学到的几个厉害的注解。</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>在介绍厉害的之前我们先来入个门，这个注解在spring里就已经存在了，是spring用来替代通过xml配置bean的繁琐方式的。在spring里使用这个注解，我们需要在xml里指定扫描的路径，而在springboot里我们就完全不用指定，只要保证springboot启动入口的路径包含了注解所在的包就可以了。在springboot里这个注解一般用来在系统启动时初始化系统数据源，数据库中间件等一些系统配置项。<br>下面我们通过一个例子来看看：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.name&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.age&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userAge;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.cityId&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String cityId;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.proviceId&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String proviceId;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BaseModel <span class="title">baseModel</span><span class="params">()</span></span>&#123;</div><div class="line">        BaseModel baseModel = <span class="keyword">new</span> BaseModel();</div><div class="line">        baseModel.setUserName(userName);</div><div class="line">        baseModel.setUserAge(userAge);</div><div class="line">        baseModel.setCityId(cityId);</div><div class="line">        baseModel.setProviceId(proviceId);</div><div class="line">        <span class="keyword">return</span> baseModel;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    <span class="comment">//测试</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    BaseModel baseModel;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBaseModel</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(baseModel.toString);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>很简单的demo，结果是baseModel按配置文件初始化了。</p>
<h2 id="ConfigurationProperties、EnableConfigurationProperties"><a href="#ConfigurationProperties、EnableConfigurationProperties" class="headerlink" title="ConfigurationProperties、EnableConfigurationProperties"></a>ConfigurationProperties、EnableConfigurationProperties</h2><p>有了上面Configuration的基础，我们来看看ConfigurationProperties是做了些啥呢。<br>修改一下baseModel实体类和UserConfig配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用ConfigurationProperties注解，设置配置文件里关联属性的key的前缀</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userAge;</div><div class="line">    <span class="keyword">private</span> String cityId;</div><div class="line">    <span class="keyword">private</span> String proviceId;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userAge;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserAge</span><span class="params">(<span class="keyword">int</span> userAge)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userAge = userAge;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCityId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cityId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCityId</span><span class="params">(String cityId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cityId = cityId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProviceId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> proviceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProviceId</span><span class="params">(String proviceId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.proviceId = proviceId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"BaseModel&#123;"</span> +</div><div class="line">                <span class="string">"userName='"</span> + userName + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", userAge="</span> + userAge +</div><div class="line">                <span class="string">", cityId='"</span> + cityId + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", proviceId='"</span> + proviceId + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//UserConfig配置类</span></div><div class="line"><span class="comment">//这里还是使用Configuration初始化配置</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//对BaseModel启用ConfigurationProperties，如果没有这个，默认不开启，那么在测试类里用Autowired就会报错</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(BaseModel.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果依旧是baseModel按配置初始化成功<br>当我把baseModel里的get、set方法删除时，就初始化不了，很明显，这里依旧还是反射，看官们可能觉得你也可以这么做，容我贴一下我的配置文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">user.user-name = test</div><div class="line">user.user-age = <span class="number">12</span></div><div class="line">user.cityId = <span class="number">330600</span></div><div class="line">user.proviceId =<span class="number">331000</span></div></pre></td></tr></table></figure></p>
<p>就问你惊不惊喜，意不意外。属性的key与baseModel里的属性名没有直接映射，springboot支持“-”别名映射。如果我在baseModel里增加另一个类的依赖呢。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//在BaseModel里新增一个实体类属性</span></div><div class="line"><span class="keyword">private</span> UserCompany workCompany;</div><div class="line"></div><div class="line"><span class="comment">//配置文件新增属性</span></div><div class="line">user.work-company.company-name = 凯歌集团</div><div class="line">user.work-company.companyPhone = <span class="number">123456</span></div><div class="line"></div><div class="line"><span class="comment">//测试用例修改</span></div><div class="line"> <span class="meta">@Autowired</span></div><div class="line">  BaseModel baseModel;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBaseModel</span><span class="params">()</span></span>&#123;</div><div class="line">      System.out.println(baseModel.toString());</div><div class="line">      System.out.println(baseModel.getWorkCompany().toString());</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>依旧初始化成功。是时候看一波源码了。<br>打开EnableConfigurationProperties，我可以看到他引入一个EnableConfigurationPropertiesImportSelector,接下来我们看看这个Selector都做了些啥<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata metadata) &#123;</div><div class="line">		MultiValueMap&lt;String, Object&gt; attributes = metadata.getAllAnnotationAttributes(</div><div class="line">				EnableConfigurationProperties.class.getName(), <span class="keyword">false</span>);</div><div class="line">        <span class="comment">// 获取注解EnableConfigurationProperties里配置的class</span></div><div class="line">		Object[] type = attributes == <span class="keyword">null</span> ? <span class="keyword">null</span></div><div class="line">				: (Object[]) attributes.getFirst(<span class="string">"value"</span>);</div><div class="line">		<span class="keyword">if</span> (type == <span class="keyword">null</span> || type.length == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;</div><div class="line">					ConfigurationPropertiesBindingPostProcessorRegistrar.class</div><div class="line">							.getName() &#125;;</div><div class="line">		&#125;</div><div class="line">        <span class="comment">//按demo里的例子，我们配置了@EnableConfigurationProperties(BaseModel.class)</span></div><div class="line">        <span class="comment">//则将ConfigurationPropertiesBeanRegistrar和ConfigurationPropertiesBindingPostProcessorRegistrar</span></div><div class="line">        <span class="comment">//完成BaseModel与配置属性的映射</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; ConfigurationPropertiesBeanRegistrar.class.getName(),</div><div class="line">				ConfigurationPropertiesBindingPostProcessorRegistrar.class.getName() &#125;;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>我们看ConfigurationPropertiesBeanRegistrar里的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata,</span></span></div><div class="line"><span class="function"><span class="params">				BeanDefinitionRegistry registry)</span> </span>&#123;</div><div class="line">			MultiValueMap&lt;String, Object&gt; attributes = metadata</div><div class="line">					.getAllAnnotationAttributes(</div><div class="line">							EnableConfigurationProperties.class.getName(), <span class="keyword">false</span>);</div><div class="line">			List&lt;Class&lt;?&gt;&gt; types = collectClasses(attributes.get(<span class="string">"value"</span>));</div><div class="line">			<span class="keyword">for</span> (Class&lt;?&gt; type : types) &#123;</div><div class="line">				String prefix = extractPrefix(type);</div><div class="line">				String name = (StringUtils.hasText(prefix) ? prefix + <span class="string">"-"</span> + type.getName()</div><div class="line">						: type.getName());</div><div class="line">				<span class="keyword">if</span> (!containsBeanDefinition((ConfigurableListableBeanFactory) registry,</div><div class="line">						name)) &#123;</div><div class="line">                    <span class="comment">//实际上只做了一件事就是如果配置类（demo里的BaseModel）未被注入容器，则完成配置类的注入</span></div><div class="line">					registerBeanDefinition(registry, type, name);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p>ConfigurationPropertiesBindingPostProcessorRegistrar里的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></div><div class="line"><span class="function"><span class="params">			BeanDefinitionRegistry registry)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!registry.containsBeanDefinition(BINDER_BEAN_NAME)) &#123;</div><div class="line">			BeanDefinitionBuilder meta = BeanDefinitionBuilder</div><div class="line">					.genericBeanDefinition(ConfigurationBeanFactoryMetaData.class);</div><div class="line">            <span class="comment">//这里注入了ConfigurationPropertiesBindingPostProcessor完成属性与配置的绑定</span></div><div class="line">			BeanDefinitionBuilder bean = BeanDefinitionBuilder.genericBeanDefinition(</div><div class="line">					ConfigurationPropertiesBindingPostProcessor.class);</div><div class="line">			bean.addPropertyReference(<span class="string">"beanMetaDataStore"</span>, METADATA_BEAN_NAME);</div><div class="line">			registry.registerBeanDefinition(BINDER_BEAN_NAME, bean.getBeanDefinition());</div><div class="line">			registry.registerBeanDefinition(METADATA_BEAN_NAME, meta.getBeanDefinition());</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们看看ConfigurationPropertiesBindingPostProcessor是怎么实现绑定的。查看了<a href="https://docs.spring.io/spring-boot/docs/1.4.7.RELEASE/api/" target="_blank">springboot的官方api</a>,我们可以看到这样一句话：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BeanPostProcessor to bind PropertySources to beans annotated with ConfigurationProperties.</div></pre></td></tr></table></figure></p>
<p>通过BeanPostProcessor接口实现配置资源和实体类的绑定。在ConfigurationPropertiesBindingPostProcessor的方法中，我们只要找到实现了BeanPostProcessor的方法即可找到绑定的实现。ok，我们看到BeanPostProcessor有postProcessBeforeInitialization和postProcessAfterInitialization方法，看方法名我们大概有个模糊的认识，应该是在bean初始化前后的操作。我们看postProcessBeforeInitialization这个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName, ConfigurationProperties annotation)</span> </span>&#123;</div><div class="line">        PropertiesConfigurationFactory&lt;Object&gt; factory = <span class="keyword">new</span> PropertiesConfigurationFactory(bean);</div><div class="line">        factory.setPropertySources(<span class="keyword">this</span>.propertySources);</div><div class="line">        factory.setValidator(<span class="keyword">this</span>.determineValidator(bean));</div><div class="line">        factory.setConversionService(<span class="keyword">this</span>.conversionService == <span class="keyword">null</span> ? <span class="keyword">this</span>.getDefaultConversionService() : <span class="keyword">this</span>.conversionService);</div><div class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</div><div class="line">            factory.setIgnoreInvalidFields(annotation.ignoreInvalidFields());</div><div class="line">            factory.setIgnoreUnknownFields(annotation.ignoreUnknownFields());</div><div class="line">            factory.setExceptionIfInvalid(annotation.exceptionIfInvalid());</div><div class="line">            factory.setIgnoreNestedProperties(annotation.ignoreNestedProperties());</div><div class="line">            <span class="keyword">if</span> (StringUtils.hasLength(annotation.prefix())) &#123;</div><div class="line">                factory.setTargetName(annotation.prefix());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//很明显，经过一系列校验后，通过加载配置的工厂类完成配置和属性的绑定</span></div><div class="line">            factory.bindPropertiesToTarget();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception var8) &#123;</div><div class="line">            String targetClass = ClassUtils.getShortName(bean.getClass());</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"Could not bind properties to "</span> + targetClass + <span class="string">" ("</span> + <span class="keyword">this</span>.getAnnotationDetails(annotation) + <span class="string">")"</span>, var8);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>好了，ConfigurationProperties就介绍到这里了，中间还有许多不明白的，源码看的很吃力，还需慢慢努力。属性和配置名不一致也能绑定成功，估计是反射的时候，对配置名做了处理。</p>
]]></content>
      
        <categories>
            
            <category> java framework </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-boot里druid连接池配置（三）]]></title>
      <url>/spring-boot%E9%87%8Cdruid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%89%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>上一篇我们知道druid实现监控的大致原理，今天我们学习一下，druid数据库连接池的实现。</p>
<h3 id="数据库连接池配置"><a href="#数据库连接池配置" class="headerlink" title="数据库连接池配置"></a>数据库连接池配置</h3><p>首先我们来看一下数据库数据源的初始化配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 主数据源</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="meta">@Bean</span>(name = <span class="string">"primaryDataSource"</span>)</div><div class="line"><span class="meta">@Primary</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">primaryDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取spring.datasource.druid前缀的相关配置属性，初始化数据源。我们来看看druid为适配springboot开发的druid-spring-boot-starter都做了哪些事。<br><img src="/images/druid/druid-spring-boot-starter.png" alt="druid-spring-boot-starter代码结构"><br>从图中我们看到，这个包很简单，主要做了两个事，一个是通过springboot的数据源初始化机制初始化自己的数据源，通过DruidDataSourceWrapper兼容springboot的数据源配置，第二个是通过springboot的注解机制，通过配置初始化自定义的系列Filter。<br>是的，我们也可以通过配置文件配置我们上篇文章提到的statViewServlet和webStatFilter。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化statViewServlet</span></div><div class="line">spring.datasource.druid.stat-view-servlet.enabled</div><div class="line"><span class="comment">//初始化webStatFilter</span></div><div class="line">spring.datasource.druid.web-stat-filter.enabled</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>看这里，这个类完成了所有配置的初始化。<br><img src="images/druid/druid_starter.png" alt="druid初始化配置"><br>DruidStatProperties这个类加载了statViewServlet和webStatFilter的配置属性，然后分别通过DruidStatViewServletConfiguration和DruidWebStatFilterConfiguration以spring注册bean的方式完成注册，与我们直接通过代码的方式注册一样。<br>DataSourceProperties这个则加载了数据源的配置属性，然后通过DataSourceAutoConfiguration完成数据源初始化。<br>DruidDataSourceWrapper则完成了数据库连接池相关的配置，我们看到它继承了DruidDataSource。</p>
<h3 id="数据库连接池初始化"><a href="#数据库连接池初始化" class="headerlink" title="数据库连接池初始化"></a>数据库连接池初始化</h3><p>druid通过springboot加载完配置后，连接池是如何初始化的呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DruidDataSource</span><span class="params">(<span class="keyword">boolean</span> fairLock)</span></span>&#123;</div><div class="line">     <span class="keyword">super</span>(fairLock);</div><div class="line"></div><div class="line">     configFromPropety(System.getProperties());</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>看这里，有一个公平锁的概念，小编马上先谷歌了一下公平锁的概念，公平锁是为了解决cpu调度线程的时候随机选择线程，无法保证线程先到先得，从而导致某些优先级低的线程永远也无法获得cpu资源的问题。公平锁能够保证线程按照时间的先后顺序执行。既然要按顺序执行，那么就要维护一个有序的队列，这个开销就有点大了，果然公平是不容易实现的。druid默认是非公平锁。</p>
]]></content>
      
        <categories>
            
            <category> java中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> druid </tag>
            
            <tag> spring-boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-boot里druid连接池配置（二）]]></title>
      <url>/spring-boot%E9%87%8Cdruid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>上篇我们简单介绍了druid的简单配置，利用druid实现了数据库的监控和配置密码的加密，今天我们从源码的角度分析druid的监控实现。</p>
<h3 id="数据库监控配置"><a href="#数据库监控配置" class="headerlink" title="数据库监控配置"></a>数据库监控配置</h3><p>在上篇的代码里我们通过springboot自带的Servlet注册Bean进行Servlet注册了StatViewServlet，通过自带的Filter注册bean注册了WebStatFilter，今天我们俩介绍一下这个两个bean的作用。</p>
<h2 id="StatViewServlet"><a href="#StatViewServlet" class="headerlink" title="StatViewServlet"></a>StatViewServlet</h2><p>看看它的配置，我们就知道，它是一个实现druid监控视图的servlet,通过这个servlet我们配置了监控视图web页的登录账号和密码，通过设置黑白名单ip配置web页的访问权限,接下来我们来看看这个配置在哪生效的。<br>跟踪StatViewServlet的父类ResourceServlet:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initAuthEnv</span><span class="params">()</span> </span>&#123;</div><div class="line">       String paramUserName = getInitParameter(PARAM_NAME_USERNAME);</div><div class="line">       <span class="keyword">if</span> (!StringUtils.isEmpty(paramUserName)) &#123;</div><div class="line">           <span class="keyword">this</span>.username = paramUserName;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       String paramPassword = getInitParameter(PARAM_NAME_PASSWORD);</div><div class="line">       <span class="keyword">if</span> (!StringUtils.isEmpty(paramPassword)) &#123;</div><div class="line">           <span class="keyword">this</span>.password = paramPassword;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       String paramRemoteAddressHeader = getInitParameter(PARAM_REMOTE_ADDR);</div><div class="line">       <span class="keyword">if</span> (!StringUtils.isEmpty(paramRemoteAddressHeader)) &#123;</div><div class="line">           <span class="keyword">this</span>.remoteAddressHeader = paramRemoteAddressHeader;</div><div class="line">       &#125;</div><div class="line">       ....</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>可以看到通过initAuthEnv完成我们配置参数的初始化工作。接着我们来看看配置怎么生效的，既然是servlet，那必然会有service方法。很快我们在ResourceServlet里找到了service方法，我们来看看druid的登陆：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="string">"/submitLogin"</span>.equals(path)) &#123;</div><div class="line">           String usernameParam = request.getParameter(PARAM_NAME_USERNAME);</div><div class="line">           String passwordParam = request.getParameter(PARAM_NAME_PASSWORD);</div><div class="line">           <span class="keyword">if</span> (username.equals(usernameParam) &amp;&amp; password.equals(passwordParam)) &#123;</div><div class="line">               request.getSession().setAttribute(SESSION_USER_KEY, username);</div><div class="line">               response.getWriter().print(<span class="string">"success"</span>);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               response.getWriter().print(<span class="string">"error"</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>这里druid简单的实现了一个登陆操作，将用户名作为一个session存储。当然作为一个内部使用的web页，我们不该有太多的苛求。接下来我们看看这个service还做了什么，我们看到service承担了整个监控视图的所有请求的处理和分发，对于数据库监控数据的请求，比如sql监控数据请求<a href="http://localhost:31009/druid/sql.json?orderBy=SQL&amp;orderType=desc&amp;page=1&amp;perPageCount=1000000&amp;" target="_blank" rel="external">http://localhost:31009/druid/sql.json?orderBy=SQL&amp;orderType=desc&amp;page=1&amp;perPageCount=1000000&amp;</a> 我们看druid是如何处理的呢，我们注意到这行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (path.contains(<span class="string">".json"</span>)) &#123;</div><div class="line">           String fullUrl = path;</div><div class="line">           <span class="keyword">if</span> (request.getQueryString() != <span class="keyword">null</span> &amp;&amp; request.getQueryString().length() &gt; <span class="number">0</span>) &#123;</div><div class="line">               fullUrl += <span class="string">"?"</span> + request.getQueryString();</div><div class="line">           &#125;</div><div class="line">           response.getWriter().print(process(fullUrl));</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p>当所有包含.json请求的都会通过process方法来处理，小编突然觉得druid对url的处理实在是好简单，突然明白为嘛它作为一个数据库连接池，还要搞一个EncodingConvertFilter的过滤器了，大公司套路深，我要回农村。。。。<br>直接看process方法，我们在StatViewServlet找到了process方法，这个厉害了，druid还可以通过配置jmx连接地址，来监控远程druid服务。也就说我们可以将实现druid连接池的应用和监控视图的web应用分离，毕竟让一个内管后台直接访问生产机器还是有风险的。<br>继续跟踪我们发现所有的请求都是通过DruidStatService.service(url)进行处理的.我们来看看druid是否处理我们上面那个请求的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (url.startsWith(<span class="string">"/sql.json"</span>)) &#123;</div><div class="line">          <span class="keyword">return</span> returnJSONResult(RESULT_CODE_SUCCESS, getSqlStatDataList(parameters));</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>跟踪getSqlStatDataList方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; getSqlStatDataList(Map&lt;String, String&gt; parameters) &#123;</div><div class="line">       Integer dataSourceId = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">       String dataSourceIdParam = parameters.get(<span class="string">"dataSourceId"</span>);</div><div class="line">       <span class="keyword">if</span> (dataSourceIdParam != <span class="keyword">null</span> &amp;&amp; dataSourceIdParam.length() &gt; <span class="number">0</span>) &#123;</div><div class="line">           dataSourceId = Integer.parseInt(dataSourceIdParam);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       List&lt;Map&lt;String, Object&gt;&gt; array = statManagerFacade.getSqlStatDataList(dataSourceId);</div><div class="line">       List&lt;Map&lt;String, Object&gt;&gt; sortedArray = comparatorOrderBy(array, parameters);</div><div class="line">       <span class="keyword">return</span> sortedArray;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里有一个dataSourceId请求里是没有的，因为我们使用的是单数据源。<br>我们看到拿到请求结果后，druid对结果进行了排序和分页，我们学习下是如何排序和分页的。这里给我们一点在内存分页的启示了吧，不过话说页面把记录总数写死的做法这样真的好么，还好有重置选项<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 排序方法</span></div><div class="line"><span class="keyword">if</span> (orderBy.trim().length() != <span class="number">0</span>) &#123;</div><div class="line">    Collections.sort(array, <span class="keyword">new</span> MapComparator&lt;String, Object&gt;(orderBy, ORDER_TYPE_DESC.equals(orderType)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 分页方法</span></div><div class="line"><span class="keyword">int</span> fromIndex = (page - <span class="number">1</span>) * perPageCount;</div><div class="line"><span class="keyword">int</span> toIndex = page * perPageCount;</div><div class="line"><span class="keyword">if</span> (toIndex &gt; array.size()) &#123;</div><div class="line">    toIndex = array.size();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> array.subList(fromIndex, toIndex);</div></pre></td></tr></table></figure></p>
<p>注意到这里使用了门面模式，通过DruidStatManagerFacade去操作druid的核心类DruidDataSource。<br>接下来我们来看看druid是如何记录sql执行以及如何存储这些记录的。看一段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getSqlStatDataList(Integer dataSourceId) &#123;</div><div class="line">        <span class="comment">//获取数据源实例</span></div><div class="line">        Set&lt;Object&gt; dataSources = getDruidDataSourceInstances();</div><div class="line">        <span class="comment">//若数据源id为空，则获取所有数据源数据</span></div><div class="line">        <span class="keyword">if</span> (dataSourceId == <span class="keyword">null</span>) &#123;</div><div class="line">            List&lt;Map&lt;String, Object&gt;&gt; sqlList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Object datasource : dataSources) &#123;</div><div class="line">                sqlList.addAll(getSqlStatDataList(datasource));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> sqlList;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Object datasource : dataSources) &#123;</div><div class="line">            <span class="keyword">if</span> (dataSourceId != <span class="keyword">null</span> &amp;&amp; dataSourceId.intValue() != System.identityHashCode(datasource)) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> getSqlStatDataList(datasource);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 小编觉得此处的return好像是多余的，但是增加了程序的健壮性</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>看到这里我们一定很好奇druid是如何维护这个dataSource的呢？<br>接下来会比较枯燥的代码，列位看官可以以个舒服的姿势看下去，最好是能有杯茶，放点枸杞是极好的。<br>我们直接进入DruidDataSource，嗯，这是一个很大很大的类，果然国内人写代码就是跟国外的不一样。<br>继续我们上面的跟踪。DruidDataSource里维护一个JdbcDataSourceStat的对象dataSourceStat来记录jdbc数据源相关信息。然后在JdbcDataSourceStat里通过LinkedHashMap<string, jdbcsqlstat="">来记录sql的执行记录。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化大小为16，负载因子为0.75，以插入顺序为排列顺序</span></div><div class="line">sqlStatMap = <span class="keyword">new</span> LinkedHashMap&lt;String, JdbcSqlStat&gt;(<span class="number">16</span>, <span class="number">0.75f</span>, <span class="keyword">false</span>)</div></pre></td></tr></table></figure></string,></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DruidDataSource</span><span class="params">(<span class="keyword">boolean</span> fairLock)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(fairLock);</div><div class="line">        <span class="comment">//根据系统配置初始化监控内存</span></div><div class="line">        configFromPropety(System.getProperties());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>现在我们知道了所有的监控记录都是放在内存里的，接下来我们来看看druid是如何监控到sql执行并放到内存里的。</p>
<h2 id="WebStatFilter"><a href="#WebStatFilter" class="headerlink" title="WebStatFilter"></a>WebStatFilter</h2><p>可能大家已经猜到了，既然数据库的状态的变化是由外部请求引起的，那么监听记录的保存肯定是对请求的追踪，接下来我们就看看WebStatFilter是如何跟踪请求执行的。<br>直接看WebStatFilter的doFilter的方法，druid对请求以及请求的session,webApp的状态，请求url进行了记录，我们没看到sql的相关实体类，进一步看WebRequestStat里有相关jdbc属性记录：<br><img src="/images/druid/druid_webRequestStat.png" alt="webRequestStat"><br>既然有这些属性必然会在执行sql的时候进行相关属性的变更，请求的执行必然会涉及连接池去连接，那么会不会在连接的通过切面之类的完成呢，考虑druid要做兼容，最有可能通过过滤器来做，有了这个思路我们在源码目录里找到了过滤器的目录，看到StatFilter，看类名我们就知道了就是对请求各种监控的更新的过滤器。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>好了，对于druid的监听就介绍到这里了，里面还有很多细节，在这里就不介绍了，因为。。。。我也没完全弄懂！！！！！，下一个我们将介绍druid的核心连接池实现。</p>
]]></content>
      
        <categories>
            
            <category> java中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> druid </tag>
            
            <tag> spring-boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-boot里druid连接池配置（一）]]></title>
      <url>/spring-boot%E9%87%8Cdruid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>J2EE项目大部分都会涉及到数据库，为了提高操作数据库的性能，提高访问的并发量，大部分的应用会选择使用数据库连接池，目前比较成熟的数据库连接池有许多，像c3p0,dhcp等已经成为ORM中间件的标配。druid作为数据库连接池的后起之秀，号称史上性能最好的数据库连接池，逐步的被广泛应用于互联网公司项目中。今天介绍一下druid在spring-boot里的简单的使用。后续将更新druid的一些配置含义</p>
<h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>小编使用了druid目前支持的集成spring-boot版本，主要的maven依赖如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.alibaba&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;druid-spring-boot-starter&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">1.1</span><span class="number">.3</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">1.1</span><span class="number">.1</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.alibaba&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;fastjson&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.14</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;javax.servlet&lt;<span class="regexp">/groupId&gt;</span></div><div class="line"><span class="regexp">    &lt;artifactId&gt;javax.servlet-api&lt;/</span>artifactId&gt;</div><div class="line">    &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;<span class="regexp">/version&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>dependency&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>数据库使用mysql数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">####################数据库配置-start#############################</div><div class="line">spring.datasource.druid.url=jdbc:mysql://xxxx:3306/dataBaseName?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</div><div class="line">spring.datasource.druid.username=root</div><div class="line">#spring.datasource.druid.password=123456</div><div class="line"># 生成的加密后的密码</div><div class="line">spring.datasource.druid.password=HT+5KPmyjBjCFi3+DbO0L8epACBi+m9i6l3R1D6pllgLPPLal7m8p1blvPUijlnx8A9pYZEDmA4Bbr5K1/gNJQ==</div><div class="line"># 启用ConfigFilter</div><div class="line">spring.datasource.druid.filter.config.enabled=true</div><div class="line">spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">####################数据库连接池配置-start#######################</div><div class="line">spring.datasource.druid.initial-size=1</div><div class="line">spring.datasource.druid.max-active=20</div><div class="line">spring.datasource.druid.min-idle=1</div><div class="line">spring.datasource.druid.max-wait=50000</div><div class="line">spring.datasource.druid.pool-prepared-statements=true</div><div class="line">spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20</div><div class="line">spring.datasource.druid.validation-query=select 1 from user_info</div><div class="line">spring.datasource.druid.validation-query-timeout=30000</div><div class="line">spring.datasource.druid.test-on-borrow=false</div><div class="line">spring.datasource.druid.test-on-return=false</div><div class="line">spring.datasource.druid.test-while-idle=true</div><div class="line">spring.datasource.druid.time-between-eviction-runs-millis=60000</div><div class="line">spring.datasource.druid.filters=stat,wall,log4j</div><div class="line">####################数据库连接池配置-end#########################</div></pre></td></tr></table></figure></p>
<h2 id="spring-boot初始化配置"><a href="#spring-boot初始化配置" class="headerlink" title="spring-boot初始化配置"></a>spring-boot初始化配置</h2><p>使用druid的第一个好处是它帮我们实现了简单的数据库监控，我们能监控sql执行的情况。通过配置druid自定义的filter和servlet，我们能通过浏览器查看数据库相关状态和应用sql执行情况，同时还能帮我们统计应用请求情况哦。<br>这里我们使用java代码的方式配置druid的filter和servlet，使用注解的配置莫名其妙的未生效让人很捉急。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @author xk</div><div class="line"> * @createTime 2017/9/18 0009 上午 10:47</div><div class="line"> * @description</div><div class="line"> */</div><div class="line">@Configuration</div><div class="line">public class DruidConfiguration &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 配置StatView的Servlet</div><div class="line">     */</div><div class="line">    @Bean</div><div class="line">    public ServletRegistrationBean DruidStatViewServlet()&#123;</div><div class="line">        ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(),&quot;/druid/*&quot;);</div><div class="line">        //添加初始化参数：initParams</div><div class="line">        //白名单：</div><div class="line">        servletRegistrationBean.addInitParameter(&quot;allow&quot;, &quot;127.0.0.1&quot;);</div><div class="line">        //IP黑名单 (存在共同时，deny优先于allow) : 如果满足deny的话提示:Sorry, you are not permitted to view this page.</div><div class="line">        servletRegistrationBean.addInitParameter(&quot;deny&quot;, &quot;192.x.x.x&quot;);</div><div class="line">        //登录查看信息的账号密码.</div><div class="line">        servletRegistrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;admin&quot;);</div><div class="line">        servletRegistrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;123456&quot;);</div><div class="line">        //是否能够重置数据.</div><div class="line">        servletRegistrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;);</div><div class="line">        return servletRegistrationBean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 配置statView的Filter</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Bean</div><div class="line">    public FilterRegistrationBean druidStatFilter()&#123;</div><div class="line">        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter());</div><div class="line"></div><div class="line">        //添加过滤规则.</div><div class="line">        filterRegistrationBean.addUrlPatterns(&quot;/*&quot;);</div><div class="line"></div><div class="line">        //添加不需要忽略的格式信息.</div><div class="line">        filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;);</div><div class="line">        //添加数据库sql监控</div><div class="line">        filterRegistrationBean.addInitParameter(&quot;profileEnable&quot;,&quot;true&quot;);</div><div class="line">        return filterRegistrationBean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然大家别忘了数据源的配置和mybatis的配置，这里我不做介绍。</p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>应用跑起来，浏览器输入localhost:port/druid/,就会进入登录页，输入账号密码，即可进入首页，如下图：<br><img src="/images/druid/druid_index_view.png" alt="druid监控页图"></p>
<h2 id="数据库安全配置"><a href="#数据库安全配置" class="headerlink" title="数据库安全配置"></a>数据库安全配置</h2><p>使用druid的第二个好处就是实现了密文的数据库账号密码配置的加密,废话不多说，我们来看看怎么对我们的密码进行加密。<br>cmd到druid的jar包目录下，执行：java -cp druid-1.1.3.jar com.alibaba.druid.filter.config.ConfigTools you_password<br><img src="/images/druid/druid_password.png" alt="druid密码加密"><br>这里取public-key作为解密公钥，password即为加密后的密码。<br>配置文件里修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.datasource.druid.password=HT+5KPmyjBjCFi3+DbO0L8epACBi+m9i6l3R1D6pllgLPPLal7m8p1blvPUijlnx8A9pYZEDmA4Bbr5K1/gNJQ==</div></pre></td></tr></table></figure></p>
<p>添加公钥配置和启用使用加密方法的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//生成的公钥</div><div class="line">public-key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAMIQ1SdCmGJlswLkNvh5rpySGPxZXr9bfFei5J4h7/q9XVlqePLcOTVkyQ0je4Gnnp2ZQPlCBsAo5ZPEXJShgRUCAwEAAQ==</div><div class="line">//配置 connection-properties，启用加密，配置公钥。</div><div class="line">spring.datasource.druid.connection-properties=config.decrypt=true;config.decrypt.key=$&#123;public-key&#125;</div></pre></td></tr></table></figure></p>
<p>启用configfilter，使加密生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.datasource.druid.filter.config.enabled=true</div></pre></td></tr></table></figure></p>
<p>详细代码：<a href="https://github.com/xkupc/druid-spring-boot" target="_blank" rel="external">https://github.com/xkupc/druid-spring-boot</a><br>参考内容：<a href="https://github.com/alibaba/druid" target="_blank" rel="external">https://github.com/alibaba/druid</a>  <a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter" target="_blank" rel="external">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p>
]]></content>
      
        <categories>
            
            <category> java中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> druid </tag>
            
            <tag> spring-boot </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
